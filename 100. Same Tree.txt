/*100. Same Tree
Given two binary trees, write a function to check if they are the same or not.
Two binary trees are considered the same if they are structurally identical and the nodes have the same value.
Example 1:
Input:    
1         1
/ \       / \
2   3     2   3
[1,2,3],   [1,2,3]
Output: true
判断两棵树是否相同和之前的判断两棵树是否对称都是一样的原理，利用深度优先搜索DFS来递归。代码如下：*/
class S100_1 {
public:
	bool isSameTree(TreeNode *p, TreeNode *q) {
		if (!p && !q) return true;
		if ((p && !q) || (!p && q) || (p->val != q->val)) return false;
		return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);
	}
};
/*这道题还有非递归的解法，因为二叉树的四种遍历(层序，先序，中序，后序)均有各自的迭代和递归的写法，这里我们先来看先序的迭代写法，相当于同时遍历两个数，
然后每个节点都进行比较，参见代码如下：*/
class S100_2 {
public:
	bool isSameTree(TreeNode* p, TreeNode* q) {
		stack<TreeNode*> s1, s2;
		if (p) s1.push(p);
		if (q) s2.push(q);
		while (!s1.empty() && !s2.empty()) {
			TreeNode *t1 = s1.top(); s1.pop();
			TreeNode *t2 = s2.top(); s2.pop();
			if (t1->val != t2->val) return false;
			if (t1->left) s1.push(t1->left);
			if (t2->left) s2.push(t2->left);
			if (s1.size() != s2.size()) return false;
			if (t1->right) s1.push(t1->right);
			if (t2->right) s2.push(t2->right);
			if (s1.size() != s2.size()) return false;
		}
		return s1.size() == s2.size();
	}
};
//此方法未做大范围数据测试
bool isSameTree2(STreeNode* p, STreeNode* q) {
	deque<STreeNode*> deque_tree;
	if (p != NULL) deque_tree.push_back(p); else return false;
	if (q != NULL) deque_tree.push_back(q); else return false;
	while (!deque_tree.empty()) {
		p = deque_tree.front();deque_tree.pop_front();
		q = deque_tree.front();deque_tree.pop_front();
 
		if ( p->value != q->value)  
			return false;
		else {
			   if (p->pLeft  != NULL)  deque_tree.push_back(p->pLeft);
			   if (q->pLeft  != NULL)  deque_tree.push_back(q->pLeft);
			   if (p->pRight != NULL)  deque_tree.push_back(p->pRight);
			   if (q->pRight != NULL)  deque_tree.push_back(q->pRight);
		}
	}
	return true;
}

//100.Same Tree 判断相同树 
	Solution297_1 tree100_1,tree100_2;       
	string str100_1 = "1 2 3", str100_2 = "1 2 3";
	TreeNode* root100_1 = tree100_1.deserialize(str100_1); TreeNode* root100_2 = tree100_2.deserialize(str100_2);
	S100_1 s100;
	cout << "100.Same Tree: " << s100.isSameTree(root100_1, root100_2) << endl;
