//23. Merge k Sorted Lists
//Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.
class S23_1 {
public:
	ListNode *mergeKLists(vector<ListNode *> &lists) {
		if (lists.empty()){
			return nullptr;
		}
		while (lists.size() > 1){
			lists.push_back(mergeTwoLists(lists[0], lists[1]));
			lists.erase(lists.begin());
			lists.erase(lists.begin());
		}
		return lists.front();
	}
	ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {
		if (l1 == nullptr){
			return l2;
		}
		if (l2 == nullptr){
			return l1;
		}
		if (l1->val <= l2->val){
			l1->next = mergeTwoLists(l1->next, l2);
			return l1;
		}
		else{
			l2->next = mergeTwoLists(l1, l2->next);
			return l2;
		}
	}
};
class S23_2 {
public:
	struct compare {
		bool operator()(const ListNode* l, const ListNode* r) {
			return l->val > r->val;
		}
	};
	ListNode *mergeKLists(vector<ListNode *> &lists) { //priority_queue
		priority_queue<ListNode *, vector<ListNode *>, compare> q;
		for (auto l : lists) {
			if (l)  q.push(l);
		}
		if (q.empty())  return NULL;

		ListNode* result = q.top();
		q.pop();
		if (result->next) q.push(result->next);
		ListNode* tail = result;
		while (!q.empty()) {
			tail->next = q.top();
			q.pop();
			tail = tail->next;
			if (tail->next) q.push(tail->next);
		}
		return result;
	}
};
class S23_3 {
public:
	static bool heapComp(ListNode* a, ListNode* b) {
		return a->val > b->val;
	}
	ListNode* mergeKLists(vector<ListNode*>& lists) { //make_heap
		ListNode head(0);
		ListNode *curNode = &head;
		vector<ListNode*> v;
		for (unsigned int i = 0; i<lists.size(); i++){
			if (lists[i]) v.push_back(lists[i]);
		}
		make_heap(v.begin(), v.end(), heapComp); //vector -> heap data strcture

		while (v.size()>0){
			curNode->next = v.front();
			pop_heap(v.begin(), v.end(), heapComp);
			v.pop_back();
			curNode = curNode->next;
			if (curNode->next) {
				v.push_back(curNode->next);
				push_heap(v.begin(), v.end(), heapComp);
			}
		}
		return head.next;
	}
};
//leetcode.23
	LinkList L23_1, L23_2, L23_3;
	CreateListTail2_nohead(&L23_1, { 1, 5, 9 });
	CreateListTail2_nohead(&L23_2, { 2, 6, 10 });
	CreateListTail2_nohead(&L23_3, { 3, 7, 12 });
	vector<ListNode*> lists{ L23_1, L23_2, L23_3 };
S23_3 s23;
			ListPrint_noHead(s23.mergeKLists(lists));//mergeKLists函数只接收无头节点的链表参数