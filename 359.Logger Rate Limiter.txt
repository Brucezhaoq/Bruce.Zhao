//359.Logger Rate Limiter 记录速率限制器
/*Design a logger system that receive stream of messages along with its timestamps, each message should be printed if and only 
if it is not printed in the last 10 seconds.
Given a message and a timestamp(in seconds granularity), return true if the message should be printed in the given timestamp, otherwise returns false.
It is possible that several messages arrive roughly at the same time.
Example:
Logger logger = new Logger();

// logging string "foo" at timestamp 1
logger.shouldPrintMessage(1, "foo"); returns true;

// logging string "bar" at timestamp 2
logger.shouldPrintMessage(2, "bar"); returns true;

// logging string "foo" at timestamp 3
logger.shouldPrintMessage(3, "foo"); returns false;

// logging string "bar" at timestamp 8
logger.shouldPrintMessage(8, "bar"); returns false;

// logging string "foo" at timestamp 10
logger.shouldPrintMessage(10, "foo"); returns false;

// logging string "foo" at timestamp 11
logger.shouldPrintMessage(11, "foo"); returns true;

Credits:
Special thanks to @memoryless for adding this problem and creating all test cases.
这道题让我们设计一个记录系统每次接受信息并保存时间戳，然后让我们打印出该消息，前提是最近10秒内没有打印出这个消息。
建立消息和时间戳之间的映射，如果某个消息不再哈希表表，我们建立其和时间戳的映射，并返回true。如果应经在哈希表里了，我们看当前时间戳是否比哈希表中保存的时间戳大10，
如果是，更新哈希表，并返回true，反之返回false，参见代码如下：*/
class S359_1 {
public:
	S359_1() {}

	bool shouldPrintMessage(int timestamp, string message) {
		if (!m.count(message)) {
			m[message] = timestamp;
			return true;
		}
		if (timestamp - m[message] >= 10) {
			m[message] = timestamp;
			return true;
		}
		return false;
	}

private:
	unordered_map<string, int> m;
};
//我们还可以写的更精简一些 但是此方法需要注意 timestamp不是原始值
class S359_2 {
public:
	S359_2() {}

	bool shouldPrintMessage(int timestamp, string message) {
		if (timestamp < m[message]) 
			return false;
		m[message] = timestamp + 10;
		return true;
	}

private:
	unordered_map<string, int> m;
};


int main(int argc, char* argv[]){
	//359.Logger Rate Limiter 记录速率限制器
	S359_1 s359; 
	cout << "359.Logger Rate Limiter: ";
	cout << s359.shouldPrintMessage(1, "foo");
	cout << s359.shouldPrintMessage(2, "bar");
	cout << s359.shouldPrintMessage(11, "foo") << endl;