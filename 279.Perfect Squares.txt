//279.Perfect Squares 完全平方数
/*这道题说是给我们一个正整数，求它最少能由几个完全平方数组成。这道题是考察四平方和定理，to be honest, 这是我第一次听说这个定理，我的数学是语文老师教的么?!  
先来看第一种很高效的方法，根据四平方和定理，任意一个正整数均可表示为4个整数的平方和，其实是可以表示为4个以内的平方数之和，那么就是说返回结果只有1,2,3或4其中的一个，
首先我们将数字化简一下，由于一个数如果含有因子4，那么我们可以把4都去掉，并不影响结果，比如2和8,3和12等等，返回的结果都相同，读者可自行举更多的栗子。
还有一个可以化简的地方就是，如果一个数除以8余7的话，那么肯定是由4个完全平方数组成，这里就不证明了，因为我也不会证明，读者可自行举例验证。那么做完两步后，一个很大的
数有可能就会变得很小了，大大减少了运算时间，下面我们就来尝试的将其拆为两个平方数之和，如果拆成功了那么就会返回1或2，因为其中一个平方数可能为0. 
(注：由于输入的n是正整数，所以不存在两个平方数均为0的情况)。注意下面的!!a + !!b这个表达式，可能很多人不太理解这个的意思，其实很简单，感叹号!表示逻辑取反，那么一个
正整数逻辑取反为0，再取反为1，所以用两个感叹号!!的作用就是看a和b是否为正整数，都为正整数的话返回2，只有一个是正整数的话返回1，参见代码如下：*/
class S279_1 {
public:
	int numSquares(int n) {
		while (n % 4 == 0) n /= 4;
		if (n % 8 == 7) return 4;
		for (int a = 0; a * a <= n; ++a) {
			int b = (int)sqrt(n - a * a);
			if (a * a + b * b == n) {
				return !!a + !!b;
			}
		}
		return 3;
	}
};
/*这道题远不止这一种解法，我们还可以用动态规划Dynamic Programming来做，我们建立一个长度为n+1的一维dp数组，将第一个值初始化为0，其余值都初始化为INT_MAX, 
i从0循环到n，j从1循环到i+j*j <= n的位置，然后每次更新dp[i+j*j]的值，动态更新dp数组，其中dp[i]表示正整数i能少能由多个完全平方数组成，那么我们求n，就是返回dp[n]即可
，也就是dp数组的最后一个数字，参见代码如下：*/
class S279_2 {//DP
public:
	int numSquares(int n) {
		vector<int> dp(n + 1, INT_MAX);
		dp[0] = 0;
		for (int i = 0; i <= n; ++i) {
			for (int j = 1; i + j * j <= n; ++j) {
				dp[i + j * j] = min(dp[i + j * j], dp[i] + 1);
			}
		}
		return dp.back();
	}
};
/*下面再来看一种DP解法，这种解法跟上面有些不同，上面那种解法是初始化了整个长度为n+1的dp数字，但是初始化的顺序不定的，而这个种方法只初始化了第一个值为0，那么在循环里计算
，每次增加一个dp数组的长度，里面那个for循环一次循环结束就算好下一个数由几个完全平方数组成，直到增加到第n+1个，返回即可，想更直观的看这两种DP方法的区别，建议每次循环后都
打印出dp数字的值来观察其更新的顺序，参见代码如下：*/
class S279_3 {//DP
public:
	int numSquares(int n) {
		vector<int> dp(1, 0);
		while (dp.size() <= (unsigned int)n) {
			int m = dp.size(), val = INT_MAX;
			for (int i = 1; i * i <= m; ++i) {
				val = min(val, dp[m - i * i] + 1);
			}
			dp.push_back(val);
		}
		return dp.back();
	}
};
/*最后我们来介绍一种递归Recursion的解法，这种方法的好处是写法简洁，但运算效率不佳。我们的目的是遍历所有比n小的完全平方数，然后对n与完全平方数的差值递归调用函数，
目的是不断更新最终结果，知道找到最小的那个，参见代码如下：*/
class S279_4 { // Recrusion
public:
	int numSquares(int n) {
		int res = n, num = 2;
		while (num * num <= n) {
			int a = n / (num * num), b = n % (num * num);
			res = min(res, a + numSquares(b));
			++num;
		}
		return res;
	}
};
int main(int argc, char* argv[]){ 
	//279.Perfect Squares 完全平方数
	S279_1 s279;
	cout << "279.Perfect Squares: " << s279.numSquares(10) << endl;