//459.Repeated Substring Pattern 重复子字符串模式
/*Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.
You may assume the given string consists of lowercase English letters only and its length will not exceed 10000.
Example 1:Input: "abab"Output: True Explanation: It's the substring "ab" twice.
Example 2:Input: "aba"Output: False
Example 3:Input: "abcabcabcabc"Output: True  Explanation: It's the substring "abc" four times. (And the substring "abcabc" twice.)
这道题给了我们一个字符串，问其是否能拆成n个重复的子串。那么既然能拆分成多个子串，那么每个子串的长度肯定不能大于原字符串长度的一半，那么我们可以从原字符串长度的
一半遍历到1，如果当前长度能被总长度整除，说明可以分成若干个子字符串，我们将这些子字符串拼接起来看跟原字符串是否相等。 如果拆完了都不相等，返回false。*/
class S459_1 {
public:
	bool repeatedSubstringPattern(string str) {
		int n = str.size();
		for (int i = n / 2; i >= 1; --i) {
			if (n % i == 0) {
				int c = n / i;
				string t = "";
				for (int j = 0; j < c; ++j) {
					t += str.substr(0, i);
				}
				if (t == str) return true;
			}
		}
		return false;
	}
};
/*下面这种方法是参考的网上的这个帖子，原作者说是用的KMP算法，LeetCode之前也有一道应用KMP算法来解的题Shortest Palindrome，但是感觉那道题才是KMP算法。
这道题也称为KMP算法感觉怪怪的(关于KMP的详细介绍请参见从头到尾彻底理解KMP，也可以看博主自己写的一篇KMP Algorithm 字符串匹配算法KMP小结)，KMP算法中的next数组
是找当前位置的最大相同前缀后缀的个数，而这道题维护的一位数组dp[i]表示，到位置i-1为止的重复字符串的字符个数，不包括被重复的那个字符串，什么意思呢，我们举个例子
，比如"abcabc"的dp数组为[0 0 0 0 1 2 3]，dp数组长度要比原字符串长度多一个。那么我们看最后一个位置数字为3，就表示重复的字符串的字符数有3个。如果是"abcabcabc"
，那么dp数组为[0 0 0 0 1 2 3 4 5 6]，我们发现最后一个数字为6，那么表示重复的字符串为“abcabc”，有6个字符。那么怎么通过最后一个数字来知道原字符串是否由重复的
子字符串组成的呢，首先当然是最后一个数字不能为0，而且还要满足dp[n] % (n - dp[n]) == 0才行，因为n - dp[n]是一个子字符串的长度，那么重复字符串的长度和肯定是
一个子字符串的整数倍，参见代码如下：*/
class S459_2 {
public:
	bool repeatedSubstringPattern(string str) {
		int i = 1, j = 0, n = str.size();
		vector<int> dp(n + 1, 0);
		while (i < n) {
			if (str[i] == str[j]) dp[++i] = ++j;
			else if (j == 0) ++i;
			else j = dp[j];
		}
		return dp[n] && (dp[n] % (n - dp[n]) == 0);
	}
};
int main(int argc, char * argv[]){
	//459.Repeated Substring Pattern
	S459_1 s459;
	cout << "459.Repeated Substring Pattern: " << s459.repeatedSubstringPattern("ababab") << endl;