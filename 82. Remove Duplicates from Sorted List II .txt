//82. Remove Duplicates from Sorted List II 
class S82_1 { // S82_1的方法deleteDuplicates不修改L14的各个节点值 
public:
	bool judgeDuplication(ListNode *cur) {
		if (cur->next == NULL)
			return false;
		return (cur->val == cur->next->val);
	}
	ListNode *deleteDuplicates(ListNode *head) {
		// Note: The Solution object is instantiated only once and is reused by each test case.
		//create a dummy head
		ListNode *dh = new ListNode(0);
		dh->next = head;
		ListNode *p = dh, *del = NULL;

		//judge duplications and delete
		while (p->next != NULL) {
			if (judgeDuplication(p->next)) {
				int last = p->next->val;
				while (p->next != NULL && p->next->val == last) {
					del = p->next;
					p->next = del->next;
					delete del;
				}
			}
			else {
				p = p->next;
			}
		}

		del = dh;
		dh = dh->next;
		delete del;
		return dh;
	}
};

//82. Remove Duplicates from Sorted List II
class S82_2 {//used a second level pointer
public:
	ListNode *deleteDuplicates(ListNode *head) {
		// Note: The Solution object is instantiated only once and is reused by each test case.
		if (head == NULL)
			return head;
		ListNode **pCur = &head, *del = NULL;
		int last;
		while ((*pCur) != NULL && (*pCur)->next != NULL) {
			if ((*pCur)->next->val == (*pCur)->val) {
				last = (*pCur)->val;
				while ((*pCur) != NULL && (*pCur)->val == last) {
					del = *pCur;
					*pCur = del->next;
					delete del;
				}
			}
			else {
				pCur = &((*pCur)->next);
			}
		}
		return head;
	}
};