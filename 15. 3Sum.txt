//15. 3Sum
/*Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? 
Find all unique triplets in the array which gives the sum of zero.
Note:Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)
The solution set must not contain duplicate triplets.
For example, given array S = {-1 0 1 2 -1 -4},
A solution set is:
(-1, 0, 1)
(-1, -1, 2)
先升序排序，然后用第一重for循环确定第一个数字。
然后在第二重循环里，第二、第三个数字分别从两端往中间扫。
如果三个数的sum等于0，得到一组解。
如果三个数的sum小于0，说明需要增大，所以第二个数往右移。
如果三个数的sum大于0，说明需要减小，所以第三个数往左移。
时间复杂度：O(n2)
注意：1、排序之后天然满足non-descending order的要求
2、为了避免重复，在没有空间要求情况下可以用map，但是也可以跳过重复元素来做。
*/
class S15_1 {//30K数据10s
public:
	vector<vector<int>> threeSum(vector<int>& nums,int x) {
		set<vector<int>> res; //set容器去重
		long long count0 = 0;   
		sort(nums.begin(), nums.end());
		for (unsigned int k = 0; k < nums.size(); ++k) {
			if (nums[k] > x) break;
			int target = x - nums[k];
			int i = k + 1, j = nums.size() - 1;
			while (i < j) {
				if (nums[i] + nums[j] == target) {
					res.insert({ nums[k], nums[i], nums[j] });
					count0++;
					while (i < j && nums[i] == nums[i + 1]) ++i;
					while (i < j && nums[j] == nums[j - 1]) --j;
					++i; --j;
				}
				else if (nums[i] + nums[j] < target) ++i;
				else --j;
			}
		}
		cout << count0 << endl;
		return vector<vector<int>>(res.begin(), res.end());
	}
};
class S15_2 { //30K数据80s
public:
	vector<vector<int> > threeSum(vector<int> &num,int value) {

		vector<vector<int> > res; long long count0 = 0;

		std::sort(num.begin(), num.end());

		for (unsigned int i = 0; i < num.size(); i++) {

			int target = value-num[i];
			int front = i + 1;
			int back = num.size() - 1;

			while (front < back) {

				int sum = num[front] + num[back];

				// Finding answer which start from number num[i]
				if (sum < target)
					front++;

				else if (sum > target)
					back--;

				else {
					vector<int> triplet(3, 0);
					triplet[0] = num[i];
					triplet[1] = num[front];
					triplet[2] = num[back];
					res.push_back(triplet);
					count0++;
					// Processing duplicates of Number 2
					// Rolling the front pointer to the next different number forwards
					while (front < back && num[front] == triplet[1]) front++;

					// Processing duplicates of Number 3
					// Rolling the back pointer to the next different number backwards
					while (front < back && num[back] == triplet[2]) back--;
				}

			}

			// Processing duplicates of Number 1
			while (i + 1 < num.size() && num[i + 1] == num[i])
				i++;

		}
		cout << count0 << endl;
		return res;

	}
};
class S15_3 {//30K数据10s
public:
	vector<vector<int>> threeSum(vector<int>& nums,int value) {
		vector<vector<int>> res;
		long long count0 = 0;
		sort(nums.begin(), nums.end());
		for (unsigned int k = 0; k < nums.size(); ++k) {
			if (nums[k] > value) break;
			if (k > 0 && nums[k] == nums[k - 1]) continue;  //去重
			int target = value - nums[k];
			int i = k + 1, j = nums.size() - 1;
			while (i < j) {
				if (nums[i] + nums[j] == target) {
					res.push_back({ nums[k], nums[i], nums[j] });
					count0++;
					while (i < j && nums[i] == nums[i + 1]) ++i;
					while (i < j && nums[j] == nums[j - 1]) --j;
					++i; --j;
				}
				else if (nums[i] + nums[j] < target) ++i;
				else --j;
			}
		}
		cout << count0 <<endl;
		return res;
	}
};
//15. 3Sum
	cout << "15. 3Sum结果数是 : " ;
	//vector<int> nums15{ -1, 0, 1, 2, -1, -4 };
	S15_3 s15;
	
	int value = 10;
	vector<int> nums15(value, 0);
	for (int i = 0; i < value; i++)
		nums15[i] = i;
	 
	clock_t start2, end2;
	double cost;
	start2 = clock();

	Print2dVec(s15.threeSum(nums15,value));
	//s15.threeSum(nums15, value);

	end2 = clock();
	cost = (double)(end2 - start2) / CLOCKS_PER_SEC;
	cout << "计算时间为: " << cost << "s" << endl;