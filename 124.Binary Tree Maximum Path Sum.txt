//124.Binary Tree Maximum Path Sum
/*
    4
  /   \
 2     6
/ \   / \
1 3   5  7
          \
		   8
要求：计算二叉树中的路径之和最大值，起止节点为任意
解法：动态规划，对每一个节点，以该节点为根节点的最大值设为value，其左子树的路径最大值为lmax，右子树的路径最大值为rmax
(!!! 注意：这里的lmax和rmax指的是从左/右子节点出发的某一条单向路径，例如对于节点4，lmax=2+3 rmax=6+7+8,而并不是lmax=1+2+3 rmax=5+6+7+8)
那么有：value = value + (lmax>0?lmax:0) + (rmax>0?rmax:0) ;
*/
class Solution124_1 {
public:
	int maxSum = INT_MIN;
    int maxPathSum(TreeNode* root) {
		if (root == NULL) return 0;
		getMaxSumWithCurNode(root);
		return maxSum;
	}
	int getMaxSumWithCurNode(TreeNode* curNode){
		int lmax = 0, rmax = 0;
		int value = curNode->val; // 包含当前节点的最大路径和  
		if (curNode->left != NULL) 
           lmax = getMaxSumWithCurNode(curNode->left);
		if (curNode->right != NULL)
			rmax = getMaxSumWithCurNode(curNode->right);
		value = value + (lmax>0 ? lmax : 0) + (rmax>0 ? rmax : 0);
		if (value > maxSum)
			maxSum = value;
		// 注意这里的返回值，取左右子树其中一条路径      
		return curNode->val + max(lmax>0 ? lmax : 0, rmax>0 ? rmax : 0);
	}
};
class Solution124_2 {
public:
	int maxPathSum(TreeNode *root) {
		int maxSum = INT_MIN;
		maxToRoot(root, maxSum);
		return maxSum;
	}
private:
	int maxToRoot(TreeNode *root, int &maxSum) {
		if (!root) return 0;
		int l = maxToRoot(root->left, maxSum);
		int r = maxToRoot(root->right, maxSum);
		if (l < 0) l = 0;
		if (r < 0) r = 0;
		if (l + r + root->val > maxSum)
			maxSum = l + r + root->val;
		return root->val += max(l, r);
	}
};
//124.Binary Tree Maximum Path Sum
	Solution124_2 solution124;
	//vector<int> vals124{ 1, 2, 3, 5, 5 };
	vector<int> vals124{ 1, -3, 3, 3, 4 };
	//vector<int> vals124{ -2, 1 };
	struct TreeNode* root124 = insertCompleteTree2(&root124, vals124);  //构建完全二叉树 
	cout << "124.Binary Tree Maximum Path Sum: " << solution124.maxPathSum(root124) << endl;