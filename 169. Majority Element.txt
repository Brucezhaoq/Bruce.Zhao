//169. Majority Element
/*Given an array of size n, find the majority element. The majority element is the element that appears more than ? n/2 ? times.
You may assume that the array is non-empty and the majority element always exist in the array.*/
/*Hash Table
The hash-table solution is very straightforward. We maintain a mapping from each element to its number of appearances.
While constructing the mapping, we update the majority element based on the max number of appearances we have seen.
Notice that we do not need to construct the full mapping when we see that an element has appeared more than n / 2 times.
The code is as follows, which should be self-explanatory.*/
class S169_1 {//时间 O(NlogN） 空间O(N）
public:
	int majorityElement(vector<int>& nums) {
		unordered_map<int, int> counts;
		int n = nums.size();
		for (int i = 0; i < n; i++)
			if (++counts[nums[i]] > n / 2)
				return nums[i];
		return 0;
	}
};
/*Sorting
Since the majority element appears more than n / 2 times, the n / 2-th element in the sorted nums must be the majority element.
This can be proved intuitively. Note that the majority element will take more than n / 2 positions in the sorted nums (cover more than
half of nums). If the first of it appears in the 0-th position, it will also appear in the n / 2-th position to cover more than half of nums.
It is similar if the last of it appears in the n - 1-th position. These two cases are that the contiguous chunk of the majority element is to
the leftmost and the rightmost in nums. For other cases (imagine the chunk moves between the left and the right end), it must also appear
in the n / 2-th position.
The code is as follows, being very short if we use the system nth_element (thanks for @qeatzy for pointing out such a nice function).*/
class S169_2 {//O(NlogN)
public:
	int majorityElement(vector<int>& nums) {
		nth_element(nums.begin(), nums.begin() + nums.size() / 2, nums.end());
		return nums[nums.size() / 2];
	}
};
/*Divide and Conquer
This idea is very algorithmic. However, the implementation of it requires some careful thought about the base cases of the recursion.
The base case is that when the array has only one element, then it is the majority one. This solution takes 24ms.*/
class S169_3 {//O(NlogN)
public:
	int majorityElement(vector<int>& nums) {
		return majority(nums, 0, nums.size() - 1);
	}
private:
	int majority(vector<int>& nums, int left, int right) {
		if (left == right) return nums[left];
		int mid = left + ((right - left) >> 1);
		int lm = majority(nums, left, mid);
		int rm = majority(nums, mid + 1, right);
		if (lm == rm) return lm;
		return count(nums.begin() + left, nums.begin() + right + 1, lm) > count(nums.begin() + left, nums.begin() + right + 1, rm) ? lm : rm;
	}
};
/*Moore Voting Algorithm
A brilliant and easy-to-implement algorithm! It also runs very fast, about 20ms.*/
class S169_4 {//O(N) moore算法 只能返回超过半数的元素 等于半数无效
public:
	int majorityElement(vector<int> &num) {
		int majorityIndex = 0;
		for (unsigned int count = 1, i = 1; i < num.size(); i++) {
			num[majorityIndex] == num[i] ? count++ : count--;
			if (count == 0) {
				majorityIndex = i;
				count = 1;
			}
		}
		return num[majorityIndex];
	}
};
 
 
/*Bit Manipulation
Another nice idea! The key lies in how to count the number of 1's on a specific bit.
Specifically, you need a mask with a 1 on the i-the bit and 0 otherwise to get the i-th bit of each element in nums.
The code is as follows.*/
class S169_5 {//O(N)
public:
	int majorityElement(vector<int>& nums) {
		int major = 0, n = nums.size();
		for (int i = 0, mask = 1; i < 32; i++, mask <<= 1) {
			int bitCounts = 0;
			for (int j = 0; j < n; j++) {
				if (nums[j] & mask) bitCounts++;
				if (bitCounts > n / 2) {
					major |= mask;
					break;
				}
			}
		}
		return major;
	}
};
//169. Majority Element
	vector<int> nums169{ 1, 1, -1, -1, 1, 2 };
	S169_1 s169;
	cout << "169. Majority Element: " << s169.majorityElement(nums169) << endl;