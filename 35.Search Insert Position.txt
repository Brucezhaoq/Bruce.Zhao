//35.Search Insert Position
/*Given a sorted array and a target value, return the index if the target is found. If not,
return the index where it would be if it were inserted in order.
You may assume no duplicates in the array.
*/
class S35_1 { //O(N)
public:
	int searchInsert(vector<int>& nums, int target) {
		int low = 0, high = nums.size() - 1;

		// Invariant: the desired index is between [low, high+1]
		while (low <= high) {
			int mid = low + ((high - low) >>1); //代替(low + high) /2是正确的,low + high有可能会大于INT_MAX溢出.如果编译器没有优化>>1速度大于/2

			if (nums[mid] < target)
				low = mid + 1;
			else
				high = mid - 1;
		}

		// (1) At this point, low > high. That is, low >= high+1
		// (2) From the invariant, we know that the index is between [low, high+1], so low <= high+1. Follwing from (1), now we know low == high+1.
		// (3) Following from (2), the index is between [low, high+1] = [low, low], which means that low is the desired index
		//     Therefore, we return low as the answer. You can also return high+1 as the result, since low == high+1
		return low;
	}
};

class S35_2 { //log(N)
public:
	int searchInsert(vector<int>& nums, int target) {
		for (unsigned int i = 0; i < nums.size(); ++i) {
			if (nums[i] >= target) return i;
		}
		return nums.size();
	}
};