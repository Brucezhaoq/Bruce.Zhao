//89.Gray Code
/*
The gray code is a binary numeral system where two successive values differ in only one bit. 
Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. 
A gray code sequence must begin with 0. For example, given n = 2, return [0,1,3,2]. Its gray code sequence is:
以二进制为0值的格雷码为第零项，第一项改变最右边的位元，第二项改变右起第一个为1的位元的左边位元，第三、四项方法同第一、二项，如此反复
即可排列出n个位元的格雷码。
如： 3bit
Gray Code:  000, 001, 011, 010, 110, 111, 101, 100, 最右边值为 “1” 的bit在最左边了，结束。
Binary      :  000, 001, 010, 011, 100, 101, 110, 111
再者就是Binary Code 转换为Gray Code了。
如：
Binary Code ：1011 要转换成Gray Code
1011 = 1（照写第一位）, 1(第一位与第二位异或 1^0 = 1), 1(第二位异或第三位， 0^1=1), 0 (1^1 =0) = 1110
其实就等于 (1011 >> 1) ^ 1011 = 1110
分析
格雷码 (Gray Code) 的定义请参考
自然二进制码转换为格雷码：g0 = b0; gi = bi  bi 1
保留自然二进制码的最高位作为格雷码的最高位，格雷码次高位为二进制码的高位与次高位异
或，其余各位与次高位的求法类似。例如，将自然二进制码 1001，转换为格雷码的过程是：保留最
高位；然后将第 1 位的 1 和第 2 位的 0 异或，得到 1，作为格雷码的第 2 位；将第 2 位的 0 和第 3 位
的 0 异或，得到 0，作为格雷码的第 3 位；将第 3 位的 0 和第 4 位的 1 异或，得到 1，作为格雷码的
第 4 位，最终，格雷码为 1101。
格雷码转换为自然二进制码：b0 = g0; bi = gi  bi 1
保留格雷码的最高位作为自然二进制码的最高位，次高位为自然二进制高位与格雷码次高位异
或，其余各位与次高位的求法类似。例如，将格雷码 1000 转换为自然二进制码的过程是：保留最高
位 1，作为自然二进制码的最高位；然后将自然二进制码的第 1 位 1 和格雷码的第 2 位 0 异或，得
到 1，作为自然二进制码的第 2 位；将自然二进制码的第 2 位 1 和格雷码的第 3 位 0 异或，得到 1，
作为自然二进制码的第 3 位；将自然二进制码的第 3 位 1 和格雷码的第 4 位 0 异或，得到 1，作为
自然二进制码的第 4 位，最终，自然二进制码为 1111。
格雷码有数学公式，整数 n 的格雷码是 n  (n/2)。
这题要求生成 n 比特的所有格雷码。
*/
// Time O(2^n)  Space O(1)
class S89_1 {
public:
	vector<int> binaryToGray(int n) {
		vector<int> result;
		for (int i = 0; i < (1 << n); ++i)
			result.push_back(i ^ (i >> 1));
		return result;
	}
	/*
	* This function converts a reflected binary
	* Gray code number to a binary number.
	* Each Gray code bit is exclusive-ored with all
	* more significant bits.
	*/
	unsigned int grayToBinary(unsigned int num){
		unsigned int mask = num;
		while (mask != 0){
			mask = mask >> 1;
			num = num ^ mask;
		}
		return num;
	}
};

//89.Gray Code
	S89_1 s89;
	vector<int> re89 = s89.binaryToGray(3);
	cout << "89.Gray Code: " << endl;