//109.Convert Sorted List to Binary Search Tree 将有序链表转为二叉搜索树
/*这道题是要求把有序链表转为二叉搜索树，和之前那道Convert Sorted Array to Binary Search Tree 将有序数组转为二叉搜索树思路完全一样，
只不过是操作的数据类型有所差别，一个是数组，一个是链表。数组方便就方便在可以通过index直接访问任意一个元素，而链表不行。由于二分查找法每次需要找到中点，
而链表的查找中间点可以通过快慢指针来操作，可参见之前的两篇博客Reorder List 链表重排序和Linked List Cycle II 单链表中的环之二有关快慢指针的应用。
找到中点后，要以中点的值建立一个数的根节点，然后需要把原链表断开，分为前后两个链表，都不能包含原中节点，然后再分别对这两个链表递归调用原函数，
分别连上左右子节点即可。代码如下：*/
struct ListNode {
	int val;
	ListNode *next;
	ListNode(int x) : val(x), next(NULL) {}
	ListNode() : next(NULL){}
};
/* 定义LinkList */
typedef struct ListNode *LinkList;
/*  建立无表头结点的单链线性表L（尾插法） */
void CreateListTail2_nohead(ListNode **head, vector<int> nums)
{
	*head = NULL;
	ListNode *tail = *head;
	for (auto i : nums)
	{
		ListNode *s = new ListNode;     //定义一个s节点用来存放每次要输入的值
		s->val = i;
		s->next = NULL;
		if (tail == NULL)
		{
			*head = s;
			tail = *head;
		}
		else
		{
			tail->next = s;
			tail = s;
		}
	}
}
class S109 {
public:
	TreeNode *sortedListToBST(ListNode *head) {
		if (!head) return NULL;
		if (!head->next) return new TreeNode(head->val);
		ListNode *slow = head;
		ListNode *fast = head;
		ListNode *last = slow;
		while (fast->next && fast->next->next) {
			last = slow;
			slow = slow->next;
			fast = fast->next->next;
		}
		fast = slow->next;
		last->next = NULL;
		TreeNode *cur = new TreeNode(slow->val);
		if (head != slow) cur->left = sortedListToBST(head);
		cur->right = sortedListToBST(fast);
		return cur;
	}
};



//109.Convert Sorted List to Binary Search Tree 将有序链表转为二叉搜索树
	LinkList L109;
	CreateListTail2_nohead(&L109, { 1, 2, 3, 4, 5, 6, 7, 8, 9 });
	S109 s109;
	TreeNode* root109 = s109.sortedListToBST(L109);
	cout << "109.Convert Sorted List to Binary Search Tree: " << endl;
