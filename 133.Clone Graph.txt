//133.Clone Graph 无向图的复制
/*Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.
OJ's undirected graph serialization:
Nodes are labeled uniquely.
We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.
As an example, consider the serialized graph {0,1,2#1,2#2,2}.
The graph has a total of three nodes, and therefore contains three parts as separated by #.
First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
Second node is labeled as 1. Connect node 1 to node 2.
Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
Visually, the graph looks like the following:
       1
      / \
     /   \
    0 --- 2
         / \
         \_/
本体考察重点是 深度拷贝 neighbors
这道无向图的复制问题和之前的拷贝带有随机指针的链表有些类似，那道题的难点是如何处理每个节点的随机指针，这道题目的难点在于如何处理每个节点的
neighbors，由于在深度拷贝每一个节点后，还要将其所有neighbors放到一个vector中，而如何避免重复拷贝呢？这道题好就好在所有节点值不同，
所以我们可以使用哈希表来对应节点值和新生成的节点。对于图的遍历的两大基本方法是深度优先搜索DFS和广度优先搜索BFS，此题的两种解法可参见网友
爱做饭的小莹子的博客，这里我们使用深度优先搜索DFS来解答此题，代码如下：*/
/*This problem is an application of graph traversal, which has two systematic methods: Bread-First Search (BFS) and
Depth-First Search (DFS). In the following, I am going to assume that you are familiar with them and just focus on what
I think is the most tricky part of this problem, that is, what else is needed beyond graph traversal to clone a graph?
In order to clone a graph, you need to have a copy of each node in the original graph. Well, you may not have too many ideas
about it. Let's do an example.
Suppose we are given a graph {0, 1 # 1, 0}. We know that the graph has two nodes 0 and 1 and they are connected to each other.
We now start from 0. We make a copy of 0. Then we check 0's neighbors and we see 1. We make a copy of 1 and we add the copy
to the neighbors of the copy of 0. Now the cloned graph is {0 (copy), 1 (copy)}. Then we visit 1. We make a copy of 1...
well, wait, why do we make another copy of it? We already have one! Note that if you make a new copy of the node,
these copies are not the same and the graph structure will be wrong! This is just what I mean by "the most tricky part of
this problem". In fact, we need to maintain a mapping from each node to its copy. If the node has an existed copy,
we simply use it. So in the above example, the remaining process is that we visit the copy of 1 and add the copy of 0 to
its neighbors and the cloned graph is eventually {0 (copy), 1 (copy) # 1 (copy), 0 (copy)}.
Note that the above process uses BFS. Of course, you can use DFS. The key is the node-copy mapping, anyway.*/
// Definition for undirected graph.
struct UndirectedGraphNode {
	int label;
    vector<UndirectedGraphNode *> neighbors;
    UndirectedGraphNode(int x) : label(x),neighbors(NULL) {};
	UndirectedGraphNode() : label(0), neighbors(NULL) {};
};
class S133_bfs {//bfs
public:
	UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
		if (!node) return NULL;
		UndirectedGraphNode* copy = new UndirectedGraphNode(node->label);
		mp[node] = copy;
		queue<UndirectedGraphNode*> toVisit;
		toVisit.push(node);
		while (!toVisit.empty()) {
			UndirectedGraphNode* cur = toVisit.front();
			toVisit.pop();
			for (UndirectedGraphNode* neigh : cur->neighbors) {
				if (mp.find(neigh) == mp.end()) {
					UndirectedGraphNode* neigh_copy = new UndirectedGraphNode(neigh->label);
					mp[neigh] = neigh_copy;
					toVisit.push(neigh);
				}
				mp[cur]->neighbors.push_back(mp[neigh]);
			}
		}
		return copy;
	}
private:
	unordered_map<UndirectedGraphNode*, UndirectedGraphNode*> mp;
};
class S133_dfs {//dfs
public:
	UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
		if (!node) return NULL;
		if (mp.find(node) == mp.end()) {
			mp[node] = new UndirectedGraphNode(node->label);
			for (UndirectedGraphNode* neigh : node->neighbors)
				mp[node]->neighbors.push_back(cloneGraph(neigh));
		}
		return mp[node];
	}
private:
	unordered_map<UndirectedGraphNode*, UndirectedGraphNode*> mp;
};
int main(int argc, char * argv[]){
	//133.Clone Graph
	UndirectedGraphNode* n133_0 = new UndirectedGraphNode(0);
	UndirectedGraphNode* n133_1 = new UndirectedGraphNode(1);
	UndirectedGraphNode* n133_2 = new UndirectedGraphNode(2);
	n133_0->neighbors.push_back(n133_1);
	n133_0->neighbors.push_back(n133_2);
	n133_1->neighbors.push_back(n133_2);
	n133_1->neighbors.push_back(n133_0);
	n133_2->neighbors.push_back(n133_0);
	n133_2->neighbors.push_back(n133_1);
	n133_2->neighbors.push_back(n133_2);
	UndirectedGraphNode* copy = new UndirectedGraphNode();
	S133_dfs s133;
	copy = s133.cloneGraph(n133_1);
	cout << "133.Clone Graph: " << endl;