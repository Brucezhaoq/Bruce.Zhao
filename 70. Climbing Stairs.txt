//70. Climbing Stairs 
/*最基本的dp
You are climbing a stair case. It takes n steps to reach to the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
Note: Given n will be a positive integer.
Example 1:Input: 2  Output:  2
Explanation:  There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:
Input: 3
Output:  3
Explanation:  There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
*/
class S70 {
public:
	int climbStairs(int n) {
		if (n <= 1) return 1;
		vector<int> dp(n);
		dp[0] = 1; dp[1] = 2;
		for (int i = 2; i < n; ++i) {
			dp[i] = dp[i - 1] + dp[i - 2];
		}
		return dp[n-1];
	}
};
//  Climbing Stairs
// Math Method, Time O(1) Space O(1)
class S70_2 {
public:
	int climbStairs(int n) {
		n++;
		double root5 = pow(5, 0.5);
		double result = 1 / root5*(pow((1 + root5) / 2, n) - pow((1 - root5) / 2, n));
		return (int)(result);
	}
};


//70.Climbing Stairs
	S70_2 s70;
	int n = 45;
	//for (int i = 1; i < n; i++)
    cout << s70.climbStairs(4) << endl;