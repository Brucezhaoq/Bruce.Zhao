//411.Minimum Unique Word Abbreviation 最短的独一无二的单词缩写
/*A string such as "word" contains the following abbreviations:
["word", "1ord", "w1rd", "wo1d", "wor1", "2rd", "w2d", "wo2", "1o1d", "1or1", "w1r1", "1o2", "2r1", "3d", "w3", "4"]
Given a target string and a set of strings in a dictionary, find an abbreviation of this target string with thesmallest possible length such that 
it does not conflict with abbreviations of the strings in the dictionary.
Each number or letter in the abbreviation is considered length = 1. For example, the abbreviation "a32bc" has length = 4.
Note:
In the case of multiple answers as shown in the second example below, you may return any one of them.
Assume length of target string = m, and dictionary size = n. You may assume that m ≤ 21, n ≤ 1000, and log2(n) + m ≤ 20.
Examples:
"apple", ["blade"] -> "a4" (because "5" or "4e" conflicts with "blade")
"apple", ["plain", "amber", "blade"] -> "1p3" (other valid answers include "ap3", "a3e", "2p2", "3le", "3l1").
这道题实际上是之前那两道Valid Word Abbreviation和Generalized Abbreviation的合体，我们的思路其实很简单，首先找出target的所有的单词缩写的形式，然后按照长度来排序
，小的排前面，我们用优先队列来自动排序，里面存一个pair，保存单词缩写及其长度，然后我们从最短的单词缩写开始，跟dictionary中所有的单词一一进行验证，利用
Valid Word Abbreviation中的方法，看其是否是合法的单词的缩写，如果是，说明有冲突，直接break跳出for循环找下一个q，进行下一个单词缩写的验证，参见代码如下：*/
class S411 {
public:
	string minAbbreviation(string target, vector<string>& dictionary) {
		if (dictionary.empty()) return to_string((int)target.size());
		priority_queue<pair<int, string>, vector<pair<int, string>>, greater<pair<int, string>>> q;
		q = generate(target);
		while (!q.empty()) {
			auto t = q.top(); q.pop();
			bool no_conflict = true;
			for (string word : dictionary) {
				if (valid(word, t.second)) {
					no_conflict = false;
					break;
				}
			}
			if (no_conflict) return t.second;
		}
		return "";
	}
private:
	priority_queue<pair<int, string>, vector<pair<int, string>>, greater<pair<int, string>>> generate(string target) {
		priority_queue<pair<int, string>, vector<pair<int, string>>, greater<pair<int, string>>> res;
		for (int i = 0; i < pow(2, target.size()); ++i) {
			string out = "";
			int cnt = 0, size = 0;
			for (unsigned int j = 0; j < target.size(); ++j) {
				if ((i >> j) & 1) ++cnt;
				else {
					if (cnt != 0) {
						out += to_string(cnt);
						cnt = 0;
						++size;
					}
					out += target[j];
					++size;
				}
			}
			if (cnt > 0) {
				out += to_string(cnt);
				++size;
			}
			res.push({ size, out });
		}
		return res;
	}
 
	bool valid(string word, string abbr) {
		int m = word.size(), n = abbr.size(), p = 0, cnt = 0;
		for (unsigned int i = 0; i < abbr.size(); ++i) {
			if (abbr[i] >= '0' && abbr[i] <= '9') {
				if (cnt == 0 && abbr[i] == '0') return false;
				cnt = 10 * cnt + abbr[i] - '0';
			}
			else {
				p += cnt;
				if (p >= m || word[p++] != abbr[i]) return false;
				cnt = 0;
			}
		}
		return p + cnt == m;
	}
};
int main(int argc, char* argv[]){
	//411.Minimum Unique Word Abbreviation 最短的独一无二的单词缩写
	vector<string> dictionary411{ "plain", "amber", "blade" }; //"plain", "amber", "blade"
	S411 s411;
	string res411 = s411.minAbbreviation("apple", dictionary411);
	cout << "411.Minimum Unique Word Abbreviation: " << endl;