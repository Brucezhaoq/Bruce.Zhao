//28. Implement strStr()
/*Implement strStr().
Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.
Example 1:Input: haystack = "hello", needle = "ll"   Output: 2
Example 2:Input: haystack = "aaaaa", needle = "bba"  Output: -1*/

/*the problem does not aim for an advanced algorithm like KMP but only a clean brute-force algorithm. 
So we can traverse all the possible starting points of haystack (from 0 to haystack.length() - needle.length()) 
and see if the following characters in haystack match those of needle.*/
class S28_1 {
public:
	int strStr(string haystack, string needle) {
		int m = haystack.length(), n = needle.length();
		if (!n) return 0;
		for (int i = 0; i < m - n + 1; i++) {
			int j = 0;
			for (; j < n; j++)
				if (haystack[i + j] != needle[j])
					break;
			if (j == n) return i;
		}
		return -1;
	}
};
/*Of course, you may challenge yourself implementing the KMP algorithm for this problem.
KMP is a classic and yet notoriously hard-to-understand algorithm. However, I think the following two links give nice explanations. 
You may refer to them.
KMP on jBoxer's blog http://jakeboxer.com/blog/2009/12/13/the-knuth-morris-pratt-algorithm-in-my-own-words/
KMP on geeksforgeeks, with a well-commented C code. http://www.geeksforgeeks.org/searching-for-patterns-set-2-kmp-algorithm/
I am sorry that I am still unable to give a personal explanation of the algorithm. I only read it from the two links 
above and mimic the code in the second link.Well, it also takes 4ms -_-*/
class S28_2 {
public:
	int strStr(string haystack, string needle) {
		int m = haystack.length(), n = needle.length();
		if (!n) return 0;
		vector<int> lps = kmpProcess(needle);
		for (int i = 0, j = 0; i < m;) {
			if (haystack[i] == needle[j]) {
				i++;
				j++;
			}
			if (j == n) return i - j;
			if (i < m && haystack[i] != needle[j]) {
				if (j) j = lps[j - 1];
				else i++;
			}
		}
		return -1;
	}
private:
	vector<int> kmpProcess(string& needle) {
		int n = needle.length();
		vector<int> lps(n, 0);
		for (int i = 1, len = 0; i < n;) {
			if (needle[i] == needle[len])
				lps[i++] = ++len;
			else if (len) len = lps[len - 1];
			else lps[i++] = 0;
		}
		return lps;
	}
};