/*679. 24 Game  
You have 4 cards each containing a number from 1 to 9. You need to judge whether they could operated through *, /, +, -, (, ) 
to get the value of 24.
Example 1:
Input: [4, 1, 8, 7]
Output: True
Explanation: (8-4) * (7-1) = 24
Example 2:
Input: [1, 2, 1, 2]
Output: False
Note:
The division operator / represents real division, not integer division. For example, 4 / (1 - 2/3) = 12.
Every operation done is between two numbers. In particular, we cannot use - as a unary operator. For example, with [1, 1, 1, 1] as input,
the expression -1 - 1 - 1 - 1 is not allowed.
You cannot concatenate numbers together. For example, if the input is [1, 2, 1, 2], we cannot write this as 12 + 12.
*/
#include<iostream>  
#include<vector>
#include<algorithm>
using namespace std;
//方法1 全排列
class Solution {
public:
	bool judgePoint24(vector<int>& nums) {
		sort(nums.begin(), nums.end());
		do {
			//for (vector<int>::const_iterator it = nums.begin(); it != nums.end(); it++)
			//	cout << *it << ' ';
			//cout << endl;
			if (valid(nums)) return true;
		} while (next_permutation(nums.begin(), nums.end()));  //4个字符产生24种全排列逐一迭代查找*, /, +, -, (, ) 
		return false;
	}
private:
	bool valid(vector<int>& nums) {
		double a = nums[0], b = nums[1], c = nums[2], d = nums[3];
		if (valid(a + b, c, d) || valid(a - b, c, d) || valid(a*b, c, d) || valid(a / b, c, d)) return true;
		if (valid(a, b + c, d) || valid(a, b - c, d) || valid(a, b*c, d) || valid(a, b / c, d)) return true;
		if (valid(a, b, c + d) || valid(a, b, c - d) || valid(a, b, c*d) || valid(a, b, c / d)) return true;
		return false;
	}
	bool valid(double a, double b, double c) {
		if (valid(a + b, c) || valid(a - b, c) || valid(a*b, c) || b&&valid(a / b, c)) return true; //如果b==0 0&&后面不做判断了
		if (valid(a, b + c) || valid(a, b - c) || valid(a, b*c) || c&&valid(a, b / c)) return true;
		return false;
	}
	bool valid(double a, double b) {
		if (abs(a + b - 24.0) < 0.0001 || abs(a - b - 24.0) < 0.0001 || abs(a*b - 24.0) < 0.0001 || b&&abs(a / b - 24.0) < 0.0001)
			return true;
		return false;
	}
};
//方法2 Backtracking
static bool judge24(vector<double> nums) {
	auto n = nums.size();
	if (n == 1) return abs(nums[0] - 24) < 1e-10;

	sort(nums.begin(), nums.end());
	// For each permutation,
	do {
		// merge the last two numbers.
		vector<double> temp(nums.begin(), nums.end() - 1);
		auto a = nums[n - 1], b = nums[n - 2];
		for (auto num : { a + b, a - b, a*b, a ? b / a : 0 }){
			// For each merged number, combine with the rest and test it
			temp.back() = num;
			if (judge24(temp)) return true;
		}
	} while (next_permutation(nums.begin(), nums.end()));

	return false;
}
bool judgePoint24(vector<int>& nums){ 
	return judge24({ nums.begin(), nums.end() }); }
 
int main()
{
	//vector<int> nums = { 4, 1, 8, 7 };
	vector<int> nums = { 3, 8, 3, 3 };
	Solution solution;
    cout << solution.judgePoint24(nums) << endl;
	cout << judgePoint24(nums) << endl;

	return 0;
}
 