/*139. Word Break
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a 
space-separated sequence of one or more dictionary words. You may assume the dictionary does not contain duplicate words.
For example, given
s    =  "leetcode",
dict = ["leet", "code"].
Return true because "leetcode" can be segmented as "leet code".
UPDATE (2017/1/4):The wordDict parameter had been changed to a list of strings (instead of a set of strings). Please reload the code 
definition to get the latest changes.*/
class S139 {
public:
	bool wordBreak(string s, vector<string>& wordDict) {
		set<string> word_set(wordDict.begin(), wordDict.end());
		int len = s.size(); // cache s.size()
		vector<bool> dp(len + 1, false);
		dp[0] = true;
		for (int i = 1; i <= len; ++i) { // use ++i instead of i++ to avoid extra copy
			for (int j = i - 1; j >= 0; --j) {
				if (dp[j] && word_set.find(s.substr(j, i - j)) != word_set.end()) { // avoid unnecessary definition of a string copy
					dp[i] = true;          //substr()函数first是索引 second是长度
					break;
				}
			}
		}
		return dp[len];
	}
}; 


S139 s139;
	vector<string> dic139{ "leet", "code" };
	cout << "139. Word Break: " << s139.wordBreak("leetcode", dic139) << endl;