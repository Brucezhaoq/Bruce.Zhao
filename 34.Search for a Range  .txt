//34.Search for a Range
/*Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.
Your algorithm's runtime complexity must be in the order of O(log n).
If the target is not found in the array, return [-1, -1].
For example,
Given [5, 7, 7, 8, 8, 10] and target value 8, return [3, 4].
*/
//方法3和方法2非常重要
class S34_1 {//Divide and Conquer 分而治之法
public:
	vector<int> searchRange(vector<int>& nums, int target) {
		int n = nums.size();
		return search(nums, 0, n - 1, target);
	}
private:
	vector<int> search(vector<int>& nums, int l, int r, int target) {
		if (nums[l] == target && nums[r] == target) return{ l, r };
		if (nums[l] <= target && target <= nums[r]) {
			int mid = l + ((r - l) >> 1);
			vector<int> left = search(nums, l, mid, target);
			vector<int> right = search(nums, mid + 1, r, target);
			if (left[0] == -1) return right;
			if (right[0] == -1) return left;
			return{ left[0], right[1] };
		}
		return{ -1, -1 };
	}
};
class S34_2 {//two binary searches
public:
	vector<int> searchRange(vector<int>& nums, int target) {
		int l = left(nums, target);
		if (l == -1) return{ -1, -1 };
		return{ l, right(nums, target) };
	}
private:
	int left(vector<int>& nums, int target) {
		int n = nums.size(), l = 0, r = n - 1;
		while (l < r) {
			int m = l + ((r - l) >> 1);
			if (nums[m] < target) l = m + 1;
			else r = m;
		}
		return nums[l] == target ? l : -1;
	}
	int right(vector<int>& nums, int target) {
		int n = nums.size(), l = 0, r = n - 1;
		while (l < r) {
			int m = l + ((r - l + 1) >> 1);
			if (nums[m] > target) r = m - 1;
			else l = m;
		}
		return r;
	}
};
//我们可以使用一个单一的函数统一左右边界。在Stefan的文章中，只使用了左边界的函数。
//如果我们想要找到正确的边界target，我们只需找到左边界target + 1并将其减去1即可
class S34_3 { //方法3是方法2的简化版 two binary searches
public:
	vector<int> searchRange(vector<int>& nums, int target) {
		int n = nums.size();
		int l = left(nums, target);
		if (l < 0 || l >= n || nums[l] != target) return{ -1, -1 };
		return{ l, left(nums, target + 1) - 1 };
	}
private:
	int left(vector<int>& nums, int target) {
		int n = nums.size(), l = 0, r = n;
		while (l < r) {
			int mid = (l + r) / 2;
			if (nums[mid] < target) l = mid + 1;
			else r = mid;
		}
		return l;
	}
};
class S34_4 {
public:
	vector<int> searchRange(vector<int>& nums, int target) {
		auto bounds = equal_range(nums.begin(), nums.end(), target);
		if (bounds.first == bounds.second)
			return{ -1, -1 };
		return{ bounds.first - nums.begin(), bounds.second - nums.begin() - 1 };
	}
};
class S34_5 {
public:
	vector<int> searchRange(vector<int>& nums, int target) {
		int lo = lower_bound(nums.begin(), nums.end(), target) - nums.begin();
		if (lo == nums.size() || nums[lo] != target)
			return{ -1, -1 };
		int hi = upper_bound(nums.begin(), nums.end(), target) - nums.begin() - 1;
		return{ lo, hi };
	}
};
//34.Search for a Range   
	vector<int> nums34{ 5, 7, 7, 8, 8 };
	S34_3 s34;
	vector<int> result = s34.searchRange(nums34, 8);
	cout << "34.Search for a Range: " << endl;