//310.Minimum Height Trees 最小高度树
/*For a undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. 
Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, 
write a function to find all the MHTs and return a list of their root labels.
Format
The graph contains n nodes which are labeled from 0 to n - 1. You will be given the number n and a list of undirected edges 
(each edge is a pair of labels).
You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] 
and thus will not appear together in edges.
Example 1:
Given n = 4, edges = [[1, 0], [1, 2], [1, 3]]
        0
        |
        1
       / \
      2   3
return [1]
Example 2:
Given n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]
     0  1  2
      \ | /
        3
        |
        4
        |
        5
return [3, 4]
Hint:
How many MHTs can a graph have at most?
Note:
(1) According to the definition of tree on Wikipedia: “a tree is an undirected graph in which any two vertices are connected
by exactly one path. In other words, any connected graph without simple cycles is a tree.”
(2) The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.
这道题虽然是树的题目，但是跟其最接近的题目是Course Schedule 课程清单和Course Schedule II 课程清单之二。由于LeetCode中的树的题目主要都是针对于
二叉树的，而这道题虽说是树但其实本质是想考察图的知识，这道题刚开始在拿到的时候，我最先想到的解法是遍历的点，以每个点都当做根节点，算出高度，
然后找出最小的，但是一时半会又写不出程序来，于是上网看看大家的解法，发现大家推崇的方法是一个类似剥洋葱的方法，就是一层一层的褪去叶节点，
最后剩下的一个或两个节点就是我们要求的最小高度树的根节点，这种思路非常的巧妙，而且实现起来也不难，跟之前那到课程清单的题一样，
我们需要建立一个图g，是一个二维数组，其中g[i]是一个一维数组，保存了i节点可以到达的所有节点。我们开始将所有只有一个连接边的节点(叶节点)都存入到
一个队列queue中，然后我们遍历每一个叶节点，通过图来找到和其相连的节点，并且在其相连节点的集合中将该叶节点删去，如果删完后此节点也也变成一个叶节
点了，加入队列中，再下一轮删除。那么我们删到什么时候呢，当节点数小于等于2时候停止，此时剩下的一个或两个节点就是我们要求的最小高度树的根节点啦，
参见代码如下：*/
class S310_1 {
public:
	vector<int> findMinHeightTrees(int n, vector<pair<int, int> >& edges) {
		if (n == 1) return{ 0 };
		vector<int> res;
		vector<unordered_set<int>> adj(n);
		queue<int> q;
		for (auto edge : edges) {
			adj[edge.first].insert(edge.second);
			adj[edge.second].insert(edge.first);
		}
		for (int i = 0; i < n; ++i) {
			if (adj[i].size() == 1) q.push(i);
		}
		while (n > 2) {
			int size = q.size();
			n -= size;
			for (int i = 0; i < size; ++i) {
				int t = q.front(); q.pop();
				for (auto a : adj[t]) {
					adj[a].erase(t);
					if (adj[a].size() == 1) q.push(a);
				}
			}
		}
		while (!q.empty()) {
			res.push_back(q.front()); q.pop();
		}
		return res;
	}
};
/*The basic idea is "keep deleting leaves layer-by-layer, until reach the root."
Specifically, first find all the leaves, then remove them. After removing, some nodes will become new leaves. 
So we can continue remove them. Eventually, there is only 1 or 2 nodes left. If there is only one node left, it is the root.
If there are 2 nodes, either of them could be a possible root.
Time Complexity: Since each node will be removed at most once, the complexity is O(n).
Thanks for pointing out any mistakes.
Updates:
More precisely, if the number of nodes is V, and the number of edges is E. The space complexity is O(V+2E), 
for storing the whole tree. The time complexity is O(E), because we gradually remove all the neighboring information. 
As some friends pointing out, for a tree, if V=n, then E=n-1. Thus both time complexity and space complexity become O(n).*/
class S310_2 {
public:

	struct Node
	{
		unordered_set<int> neighbor;
		bool isLeaf()const{ return neighbor.size() == 1; }
	};

	vector<int> findMinHeightTrees(int n, vector<pair<int, int>>& edges) {

		vector<int> buffer1;
		vector<int> buffer2;
		vector<int>* pB1 = &buffer1;
		vector<int>* pB2 = &buffer2;
		if (n == 1)
		{
			buffer1.push_back(0);
			return buffer1;
		}
		if (n == 2)
		{
			buffer1.push_back(0);
			buffer1.push_back(1);
			return buffer1;
		}

		// build the graph
		vector<Node> nodes(n);
		for (auto p : edges)
		{
			nodes[p.first].neighbor.insert(p.second);
			nodes[p.second].neighbor.insert(p.first);
		}

		// find all leaves
		for (int i = 0; i<n; ++i)
		{
			if (nodes[i].isLeaf()) pB1->push_back(i);
		}

		// remove leaves layer-by-layer            
		while (1)
		{
			for (int i : *pB1)
			{
				for (auto n : nodes[i].neighbor)
				{
					nodes[n].neighbor.erase(i);
					if (nodes[n].isLeaf()) pB2->push_back(n);
				}
			}
			if (pB2->empty())
			{
				return *pB1;
			}
			pB1->clear();
			swap(pB1, pB2);
		}

	}
};
int main(int argc, char * argv[]){
	//310.Minimum Height Trees
	vector<pair<int, int>>  edges310{ { 1, 0 }, { 1, 2 }, { 1, 3 } };
	S310_1 s310;
	vector<int> re310 = s310.findMinHeightTrees(4, edges310);
	cout << "310.Minimum Height Trees: " << endl;