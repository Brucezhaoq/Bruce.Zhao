/*leetcode 45. Jump Game II
Given an array of non-negative integers, you are initially positioned at the first index of the array.
Each element in the array represents your maximum jump length at that position.
Your goal is to reach the last index in the minimum number of jumps.
For example:
Given array A = [2,3,1,1,4]
The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)
Note:
You can assume that you can always reach the last index.
*/

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int jump(vector<int>& nums) {
	int lastMax = 0, currentMax = 0;

	int step = 0, i = 0;
	while (currentMax < nums.size() - 1)
	{
		while (i <= lastMax)
		{
			currentMax = max(i + nums[i], currentMax);
			++i;
		}
		if (lastMax == currentMax)
			return -1;
		lastMax = currentMax;
		step++;
	}
	return step;
}
int jump(int A[], int n) { //O(N)
	if (n<2) return 0;
	int level = 0, currentMax = 0, i = 0, nextMax = 0;

	while (currentMax - i + 1>0){ //nodes count of current level>0
		level++;
		for (; i <= currentMax; i++){ //traverse current level , and update the max reach of next level
			nextMax = max(nextMax, A[i] + i);
			if (nextMax >= n - 1) return level;// if last element is in level+1,  then the min jump=level
		}

		if (currentMax == nextMax) return INT_MAX; //***cannot move forward from this level

		currentMax = nextMax;
	}
}

int main(int argc, char* argv[])
{
	//vector<int> nums = { 2, 3, 1, 1, 2 };
	vector<int> nums = { 3, 0, 0, 0, 4 };
	cout << jump(nums)<<endl;

	int A[] = { 3, 0, 0, 0, 4 };
	cout << jump(A,sizeof(A)/sizeof(int) )<< endl;

	return 0;
}