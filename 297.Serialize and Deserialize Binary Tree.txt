//297.Serialize and Deserialize Binary Tree Non-recursion
/*Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file 
or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.
Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization 
algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized 
to the original tree structure.
For example, you may serialize the following tree
    1
   / \
  2   3
     / \
    4   5
as "[1,2,3,null,null,4,5]", just the same as how LeetCode OJ serializes a binary tree. You do not necessarily need to follow this format, 
so please be creative and come up with different approaches yourself.
Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.
*/
class Solution297_1 {
public:
	// Encodes a tree to a single string.
	string serialize(TreeNode* root) {
		ostringstream out;
		queue<TreeNode*> q;
		if (root) q.push(root);
		while (!q.empty()) {
			TreeNode *t = q.front(); q.pop();
			if (t) {
				out << t->val << ' ';
				q.push(t->left);
				q.push(t->right);
			}
			else {
				out << "# ";
			}
		}
		return out.str();
	}
	// Decodes your encoded data to tree.
	TreeNode* deserialize(string data) {
		if (data.empty()) return nullptr;
		istringstream in(data);
		queue<TreeNode*> q;
		string val;
		in >> val;
		TreeNode *res = new TreeNode(stoi(val)), *cur = res;
		q.push(cur);
		while (!q.empty()) {
			TreeNode *t = q.front(); q.pop();
			if (!(in >> val)) break;
			if (val != "#") {
				cur = new TreeNode(stoi(val));
				q.push(cur);
				t->left = cur;
			}
			if (!(in >> val)) 
				break;
			if (val != "#") {
				cur = new TreeNode(stoi(val));
				q.push(cur);
				t->right = cur;
			}
		}
		return res;
	}
};
//297.Serialize and Deserialize Binary Tree 
	Solution297_1 solution297_1;
	CBinaryTree tree297;
	//tree297.Insert(5); tree297.Insert(2); tree297.Insert(3); tree297.Insert(6);
	tree297.Insert(1); tree297.Insert(3); tree297.Insert(5);
	cout << "297.Serialize   Binary Tree: " << solution297_1.serialize(tree297.getTree()) << endl;
	cout << "297.Deserialize Binary Tree: ";   
	//string s = "1 2 3 # # 4 5";
	//        1
	//	     / \
    //      2   3
    //     / \ / \
    //    #  #4   5
	//string s = "1 # 3 # 5";
	//          1
    //         / \
    //        #   3
    //           / \
    //          #   5
	string s = "1 # 3 2 #";
	//         1 
    //        / \
    //       #   3
    //          / \
	//		   2   #   
	solution297_1.deserialize(s);
	cout << endl;