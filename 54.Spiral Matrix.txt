//54. Spiral Matrix
/*Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.
For example,
Given the following matrix:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
You should return [1,2,3,6,9,8,7,4,5].
*/
/*The idea is just to add the elements in the spiral order. First the up-most row (u), 
then the right-most column (r), then the down-most row (d), and finally the left-most column (l). 
After finishing a row or a column, update the corresponding variable to continue the process.
*/
class S54_1 {
public:
	vector<int> spiralOrder(vector<vector<int>>& matrix) {
		if (matrix.empty()) return{};
		int m = matrix.size(), n = matrix[0].size();
		vector<int> spiral(m * n);
		int u = 0, d = m - 1, l = 0, r = n - 1, k = 0;
		while (true) {
			// up
			for (int col = l; col <= r; col++) spiral[k++] = matrix[u][col];
			if (++u > d) break;
			// right
			for (int row = u; row <= d; row++) spiral[k++] = matrix[row][r];
			if (--r < l) break;
			// down
			for (int col = r; col >= l; col--) spiral[k++] = matrix[d][col];
			if (--d < u) break;
			// left
			for (int row = d; row >= u; row--) spiral[k++] = matrix[row][l];
			if (++l > r) break;
		}
		return spiral;
	}
};
	//54. Spiral Matrix 
	/*vector<vector<int>> nums54{
		{  1,  2,  3,  4,  5 },
		{  6,  7,  8,  9, 10 },
		{ 11, 12, 13, 14, 15 },
		{ 16, 17, 18, 19, 20 },
		{ 21, 22, 23, 24, 25 }};*/
	int M54 = 3, N54 = 3;
	vector<vector<int> > nums54 (M54, vector<int>(N54,0));
	for (int i = 0; i < M54; i++)
		for (int j = 0; j < N54; j++)
			nums54[i][j] = i*N54 + j + 1;
	S54_1 s54;
	vector<int> res54 = s54.spiralOrder(nums54);
	cout << "54. Spiral Matrix: " << endl;