//104.Maximum Depth of Binary Tree
/*Given a binary tree, find its maximum depth.
The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.*/
/*求二叉树的最大深度问题用到深度优先搜索DFS，递归的完美应用，跟求二叉树的最小深度问题原理相同。代码如下：*/
//Depth-first-search
class S104_1{
public:
	int maxDepth(TreeNode *root)
	{
		return root == NULL ? 0 : max(maxDepth(root->left), maxDepth(root->right)) + 1;
	}
};
/*也可以使用层序遍历二叉树，然后计数总层数，即为二叉树的最大深度，参见代码如下：*/
class S104_2{
	int maxDepth(TreeNode *root){
		if (root == NULL)  return 0;
		int res = 0;
		queue<TreeNode *> q;
		q.push(root);
		while (!q.empty()){
			++res;
			for (int i = 0, n = q.size(); i < n; ++i){
				TreeNode *p = q.front();  q.pop();
				if (p->left != NULL)   q.push(p->left);
				if (p->right != NULL)  q.push(p->right);
			}
		}
		return res;
	}
};