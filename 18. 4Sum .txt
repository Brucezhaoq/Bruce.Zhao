//18. 4Sum
/*Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? 
Find all unique quadruplets in the array which gives the sum of target.
Note: The solution set must not contain duplicate quadruplets.
For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.
A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]
*/
class S18_1 {  // O(n^3) nums=500,target950 时间14s 最佳方法
public:
	vector<vector<int>> fourSum(vector<int>& nums, int target) {
		vector<vector<int>> total;
		int n = nums.size();
		if (n<4)  return total;
		sort(nums.begin(), nums.end());
		for (int i = 0; i<n - 3; i++)
		{
			if (i>0 && nums[i] == nums[i - 1]) continue;
			if (nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3]>target) break;
			if (nums[i] + nums[n - 3] + nums[n - 2] + nums[n - 1]<target) continue;
			for (int j = i + 1; j<n - 2; j++)
			{
				if (j>i + 1 && nums[j] == nums[j - 1]) continue;
				if (nums[i] + nums[j] + nums[j + 1] + nums[j + 2]>target) break;
				if (nums[i] + nums[j] + nums[n - 2] + nums[n - 1]<target) continue;
				int left = j + 1, right = n - 1;
				while (left<right){
					int sum = nums[left] + nums[right] + nums[i] + nums[j];
					if (sum<target) left++;
					else if (sum>target) right--;
					else{
						total.push_back(vector<int>{nums[i], nums[j], nums[left], nums[right]});
						do{ left++; } while (nums[left] == nums[left - 1] && left<right);
						do{ right--; } while (nums[right] == nums[right + 1] && left<right);
					} // for else
				} //for while
			} //for j
		} //for i
		return total;
	}
};

class S18_2 {  // O(n^3) nums=300,target590 时间60s 此方法需要优化(参考方法1)
public:
	vector<vector<int> > fourSum(vector<int> &nums, int target) {
		set<vector<int> > res;
		sort(nums.begin(), nums.end());
		for (int i = 0; i < int(nums.size() - 3); ++i) {
			for (int j = i + 1; j < int(nums.size() - 2); ++j) {
				int left = j + 1, right = nums.size() - 1;
				while (left < right) {
					int sum = nums[i] + nums[j] + nums[left] + nums[right];
					if (sum == target) {
						vector<int> out;
						out.push_back(nums[i]);
						out.push_back(nums[j]);
						out.push_back(nums[left]);
						out.push_back(nums[right]);
						res.insert(out);
						++left; --right;
					}
					else if (sum < target) ++left;
					else --right;
				}
			}
		}
		return vector<vector<int> >(res.begin(), res.end());
	}
};
class S18_3 { //using hashtable, avg O(n^3)nums=500,target950 时间46s
public:
	vector<vector<int> > fourSum(vector<int> &num, int target){
		vector<vector<int> > vvi;
		int n = num.size();
		if (n < 4) return  vvi;

		sort(num.begin(), num.end());
		unordered_map<int, vector<pair<int, int>> > mp;
		for (int i = 0; i < n; i++){
			for (int j = i + 1; j < n; j++){
				mp[num[i] + num[j]].push_back(make_pair(i, j));
			}
		}

		for (int i = 0; i < n; i++){
			if (i>0 && num[i] == num[i - 1]) continue;
			for (int j = i + 1; j < n; j++){
				if (j > i + 1 && num[j] == num[j - 1]) continue;
				int res = target - num[i] - num[j];
				if (mp.count(res)){
					for (auto it = mp[res].begin(); it != mp[res].end(); it++){
						int k = (*it).first, l = (*it).second;
						if (k > j){ // k>j make sure that the second pair has bigger values than the first pair.
							if (!vvi.empty() && num[i] == vvi.back()[0] && num[j] == vvi.back()[1]
								&& num[k] == vvi.back()[2] && num[l] == vvi.back()[3]){
								continue; //if the obtained 4 elements are the same as previous one continue to next
							}
							vector<int> vi = { num[i], num[j], num[k], num[l] };
							vvi.push_back(vi);
						} // if k>j

					}//for it
				}//if
			}// forj
		}//for i
		return vvi;
	}
};
//18. 4Sum 
	int d18 = 300;
	vector<int> nums18(d18, 0);
	for (int i = 0; i < d18; i++)
		nums18[i] = i;
	timestart();
	S18_2 s18;
	s18.fourSum(nums18, 590);
	timeend();
	cout << "18. 4Sum 计算时间是 : " << cost << "s" << endl;