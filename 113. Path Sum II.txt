//113. Path Sum II
/*Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.
For example:
Given the below binary tree and sum = 22,
5
/ \
4   8
/   / \
11  13  4
/  \    / \
7    2  5   1
return
[
[5,4,11,2],
[5,8,4,5]
]
*/
/*这道二叉树路径之和在之前Path Sum I需要找出路径,但是基本思想都一样，还是需要用深度优先搜索DFS，只不过数据结构相对复杂一点，需要用到二维的vector，
而且每当DFS搜索到新节点时，都要保存该节点。而且每当找出一条路径之后，都将这个保存为一维vector的路径保存到最终结果二位vector中。并且，每当DFS搜索到子节点，
发现不是路径和时，返回上一个结点时，需要把该节点从一维vector中移除。代码如下：*/
class S113_1 {
public:
	vector<vector<int> > pathSum(TreeNode *root, int sum) {
		vector<vector<int>> res;
		vector<int> out;
		helper(root, sum, out, res);
		return res;
	}
private:
	void helper(TreeNode* node, int sum, vector<int>& out, vector<vector<int>>& res) {
		if (!node) return;
		out.push_back(node->val);
		if (sum == node->val && !node->left && !node->right) {
			res.push_back(out);
		}
		helper(node->left, sum - node->val, out, res);
		helper(node->right, sum - node->val, out, res);
		out.pop_back();
	}
};
/*下面这种方法是迭代的写法，用的是中序遍历的顺序，参考之前那道Binary Tree Inorder Traversal，中序遍历本来是要用栈来辅助运算的，由于我们要取出路径上的节点值，
所以我们用一个vector来代替stack，首先利用while循环找到最左子节点，在找的过程中，把路径中的节点值都加起来，这时候我们取出vector中的尾元素，如果其左右子节点
都不存在且当前累加值正好等于sum了，我们将这条路径取出来存入结果res中，下面的部分是和一般的迭代中序写法有所不同的地方，因为如果当前最左节点已经是个叶节点了，
我们要转移到其他的节点上时需要把当前的节点值减去，而如果当前最左节点不是叶节点，下面还有一个右子节点，这时候移动指针时就不能减去当前节点值，为了区分这两种情况，
我们需要用一个额外指针pre来指向前一个节点，如果右子节点存在且不等于pre，我们直接将指针移到右子节点，反之我们更新pre为cur，cur重置为空，val减去当前节点，
s删掉最后一个节点，参见代码如下：*/
class S113_2 {
public:
	vector<vector<int> > pathSum(TreeNode *root, int sum) {
		vector<vector<int>> res;
		vector<TreeNode*> s;
		TreeNode *cur = root, *pre = NULL;
		int val = 0;
		while (cur || !s.empty()) {
			while (cur) {
				s.push_back(cur);
				val += cur->val;
				cur = cur->left;
			}
			cur = s.back();
			if (!cur->left && !cur->right && val == sum) {
				vector<int> v;
				for (auto it : s) {
					v.push_back(it->val);
				}
				res.push_back(v);
			}
			if (cur->right && cur->right != pre) cur = cur->right;
			else {
				pre = cur;
				val -= cur->val;
				s.pop_back();
				cur = NULL;
			}
		}
		return res;
	}
};
//113.Path SumII
	S113_1 s113;
	vector<int> vals113{ 5, 4, 8, 11, 0, 13, 4, 7, 2, 0, 0, 0, 0, 5, 1 };
	struct TreeNode* root113 = insertCompleteTree2(&root113, vals113);
	vector<vector<int>> re113 = s113.pathSum(root112, 22);
	cout << "113.Path Sum II: " << endl;
	