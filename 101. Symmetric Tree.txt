//101. Symmetric Tree
/*Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).
For example, this binary tree [1,2,2,3,4,4,3] is symmetric:
1
/ \
2   2
/ \ / \
3  4 4  3
But the following [1,2,2,null,3,null,3] is not:
1
/ \
2   2
\   \
3    3
*/
/*判断二叉树是否是平衡树，比如有两个节点n1, n2，我们需要比较n1的左子节点的值和n2的右子节点的值是否相等，同时还要比较n1的右子节点的值和n2的左子结点的值是否
相等，以此类推比较完所有的左右两个节点。我们可以用递归和迭代两种方法来实现，写法不同，但是算法核心都一样。
递归方法 (Recursive Solution)：*/
class Solution101_1 {
public:
	bool isSymmetric(TreeNode* root) {
		if (root == NULL) return true;
		return isSymmetric(root->left, root->right);
	}
	bool isSymmetric(TreeNode* left, TreeNode* right){
		if (left == NULL || right == NULL) return true;
		if (left->val == right->val){
			return isSymmetric(left->left, right->right) && isSymmetric(left->right, right->left);
		}
		return false;
	}
};
//迭代方法 (Iterative Solution)：
class Solution101_2 {
public:
	bool isSymmetric(TreeNode *root) {
		if (!root) return true;
		queue<TreeNode*> q1, q2;
		q1.push(root->left);
		q2.push(root->right);

		while (!q1.empty() && !q2.empty()) {
			TreeNode *node1 = q1.front();
			TreeNode *node2 = q2.front();
			q1.pop();
			q2.pop();
			if ((node1 && !node2) || (!node1 && node2)) return false;
			if (node1) {
				if (node1->val != node2->val) return false;
				q1.push(node1->left);
				q1.push(node1->right);
				q2.push(node2->right);
				q2.push(node2->left);
			}
		}
		return true;
	}
};
//101. Symmetric Tree 对称树 
	vector<int> val101{ 1, 2, 2, 3, 4, 4, 3 };
	struct TreeNode* root101 = insertCompleteTree2(&root101, val101);
	cout << "101. Symmetric Tree 生成对称数:" << endl;
	levelOrder2(root101);
	//判断对称树 
	S101_1 s101;
	cout << "101. Symmetric Tree 判断对称树:" << s101.isSymmetric(root101) << endl;
