//24.Swap Nodes in Pairs
/*Given a linked list, swap every two adjacent nodes and return its head.
For example,Given 1->2->3->4, you should return the list as 2->1->4->3.
Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
*/
class S24_1 {
public:
	ListNode* swapPairs(ListNode* head) {
		ListNode *dummy = new ListNode(-1), *pre = dummy;
		dummy->next = head;
		while (pre->next && pre->next->next) {
			ListNode *t = pre->next->next;
			pre->next->next = t->next;
			t->next = pre->next;
			pre->next = t;
			pre = t->next;
		}
		return dummy->next;
	}
}; 
class S24_2 {
public:
	ListNode* swapPairs(ListNode* head) {
		if (!head || !head->next) return head;
		ListNode *t = head->next;
		head->next = swapPairs(head->next->next);
		t->next = head;
		return t;
	}
};
class S24_3 {
public:
	ListNode* swapPairs(ListNode* head) {
		ListNode **pp = &head, *a, *b;
		while ((a = *pp) && (b = a->next)) {
			a->next = b->next;
			b->next = a;
			*pp = b;
			pp = &(a->next);
		}
		return head;
	}
};
LinkList L24;
			CreateListTail2_nohead(&L24, { 1, 2, 3, 4 });
			S24_1 s24;
			ListPrint_noHead(s24.swapPairs(L24));