//406.Queue Reconstruction by Height 根据高度重建队列
/*Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers(h, k),
where h is the height of the person and k is the number of people in front of this person who have a height greater than or equal to h. 
Write an algorithm to reconstruct the queue.
Note:The number of people is less than 1,100.
Example
Input:
[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]
Output:
[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]
这道题给了我们一个队列，队列中的每个元素是一个pair，分别为身高和前面身高不低于当前身高的人的个数，让我们重新排列队列，使得每个pair的第二个参数都满足题意。
首先我们来看一种超级简洁的方法，大神的解法。首先我们给队列先排个序，按照身高高的排前面，如果身高相同，则第二个数小的排前面。然后我们新建
一个空的数组，遍历之前排好序的数组，然后根据每个元素的第二个数字，将其插入到res数组中对应的位置，参见代码如下：*/
class S406_1{
public:
	vector<pair<int, int>> reconstructQueue(vector<pair<int, int>>& people) {
		sort(people.begin(), people.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
			return a.first > b.first || (a.first == b.first && a.second < b.second);
		});
		vector<pair<int, int>> res;
		for (auto peo : people) {
			res.insert(res.begin() + peo.second, peo);
		}
		return res;
	}
};
/*上面那种方法是简洁，但是用到了额外空间，我们来看一种不使用额外空间的解法，这种方法没有使用vector自带的insert或者erase函数，
而是通过一个变量cnt和k的关系来将元素向前移动到正确位置，移动到方法是通过每次跟前面的元素交换位置，使用题目中给的例子来演示过程：
[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]
排序后：
[[7,0], [7,1], [6,1], [5,0], [5,2], [4,4]]
交换顺序：
[[7,0], [6,1], [7,1], [5,0], [5,2], [4,4]]
[[5,0], [7,0], [6,1], [7,1], [5,2], [4,4]]
[[5,0], [7,0], [5,2], [6,1], [7,1], [4,4]]
[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]*/
class S406_2 {
public:
	vector<pair<int, int>> reconstructQueue(vector<pair<int, int>>& people) {
		sort(people.begin(), people.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
			return a.first > b.first || (a.first == b.first && a.second < b.second);
		});
		for (unsigned int i = 1; i < people.size(); ++i) {
			int cnt = 0;
			for (unsigned int j = 0; j < i; ++j) {
				if (cnt == people[i].second) {
					pair<int, int> t = people[i];
					for (unsigned int k = i - 1; k >= j; --k) {
						people[k + 1] = people[k];
					}
					people[j] = t;
					break;
				}
				if (people[j].first >= people[i].first) ++cnt;
			}
		}
		return people;
	}
};
//下面这种解法跟解法一很相似，只不过没有使用额外空间，而是直接把位置不对的元素从原数组中删除，直接加入到正确的位置上，参见代码如下：
class S406_3 {
public:
	vector<pair<int, int>> reconstructQueue(vector<pair<int, int>>& people) {
		sort(people.begin(), people.end(), [](const pair<int, int> &a, const pair<int, int> &b) {
			return a.first > b.first || (a.first == b.first && a.second < b.second);
		});
		for (unsigned int i = 0; i < people.size(); i++) {
			auto p = people[i];
			if (p.second != i) {
				people.erase(people.begin() + i);
				people.insert(people.begin() + p.second, p);
			}
		}
		return people;
	}
};
int main(int argc, char* argv[]){ 
	//406.Queue Reconstruction by Height
	vector<pair<int, int>> peo406{ { 7, 0 }, { 4, 4 }, { 7, 1 }, { 5, 0 }, { 6, 1 }, { 5, 2 } };
	S406_1 s406;
	vector<pair<int, int>> re406 = s406.reconstructQueue(peo406);
	cout << "406.Queue Reconstruction by Height: " << endl;