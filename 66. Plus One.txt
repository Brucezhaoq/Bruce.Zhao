// 66. Plus One
// TimeO(n) SpaceO(1)
class S66_1 {
public:
	void plusOne(vector<int> &digits){
	int n = digits.size();
	for (int i = n - 1; i >= 0; --i)
	{
		if (digits[i] == 9)
		{
			digits[i] = 0;
		}
		else
		{
			digits[i]++;
			return;
		}
	}
	digits[0] = 1;
	digits.push_back(0);
    }
};
class S66_2 {//此方法远远不如S66_1容易理解
public:
	vector<int> plusOne(vector<int> &digits) {
		add(digits, 1);
		return digits;
	}
private:
	// 0 <= digit <= 9
	void add(vector<int> &digits, int one) {
		int c = one; // carry,进位
		for (auto it = digits.rbegin(); it != digits.rend(); ++it) { //反向迭代器rbegin()指向末尾的下一位置，rend()当前vector起始位置
			*it += c;
			c = *it / 10;
			*it %= 10;
		}
		if (c > 0) digits.insert(digits.begin(), 1);
	}
};
//66.PlusOne
	vector<int> nums66{ 1, 9, 9 }; //此题要求数组中只能是1位的数字
	S66_1 s66;
	s66.plusOne(nums66);
	cout << "66.PlusOne: " << endl;