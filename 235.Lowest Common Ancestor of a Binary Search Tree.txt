//235.Lowest Common Ancestor of a Binary Search Tree 二叉搜索树的最小共同父节点
/*Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w 
as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”
        _______6______
       /              \
    ___2__          ___8__
   /      \        /      \
   0      _4       7       9
         /  \
         3   5
For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2,
since a node can be a descendant of itself according to the LCA definition.
这道题让我们求二叉搜索树的最小共同父节点, LeetCode中关于BST的题有Validate Binary Search Tree 验证二叉搜索树， Recover Binary Search Tree 复原二叉搜索树，
Binary Search Tree Iterator 二叉搜索树迭代器， Unique Binary Search Trees 独一无二的二叉搜索树， Unique Binary Search Trees II 独一无二的二叉搜索树
之二，Convert Sorted Array to Binary Search Tree 将有序数组转为二叉搜索树 , Convert Sorted List to Binary Search Tree 将有序链表转为二叉搜索树 
和 Kth Smallest Element in a BST 二叉搜索树中的第K小的元素。这道题我们可以用递归来求解，我们首先来看题目中给的例子，由于二叉搜索树的特点是左<根<右，
所以根节点的值一直都是中间值，大于左子树的所有节点值，小于右子树的所有节点值，那么我们可以做如下的判断，如果根节点的值大于p和q之间的较大值，
说明p和q都在左子树中，那么此时我们就进入根节点的左子节点继续递归，如果根节点小于p和q之间的较小值，说明p和q都在右子树中，那么此时我们就进入根节点的右子节点
继续递归，如果都不是，则说明当前根节点就是最小共同父节点，直接返回即可，参见代码如下：*/
class S235_1 {
public:
	TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
		if (!root) return NULL;
		if (root->val > max(p->val, q->val))
			return lowestCommonAncestor(root->left, p, q);
		else if (root->val < min(p->val, q->val))
			return lowestCommonAncestor(root->right, p, q);
		else return root;
	}
};
//当然，此题也有非递归的写法，用个while循环来代替递归调用即可，然后不停的更新当前的根节点，也能实现同样的效果，代码如下：
class S235_2 {
public:
	TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
		if (!root) return NULL;
		while (true) {
			if (root->val > max(p->val, q->val)) root = root->left;
			else if (root->val < min(p->val, q->val)) root = root->right;
			else break;
		}
		return root;
	}
};
//235.Lowest Common Ancestor of a Binary Search Tree 二叉搜索树的最小共同父节点
	Solution297_1 tree235;       //建立 6 2 8 0 4 7 9 # # 3 5的二叉树对象,#代表NULL
	string str235 = "6 2 8 0 4 7 9 # # 3 5";
	TreeNode* root235 = tree235.deserialize(str235);
	S235_1 s235;
	TreeNode* treet235 = s235.lowestCommonAncestor(root235, root235->left->right->left, root235->left->right->right);//3|5祖先节点是4
	cout << "235.Lowest Common Ancestor of a Binary Search Tree: " << endl;