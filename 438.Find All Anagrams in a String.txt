//438.Find All Anagrams in a String 找出字符串中所有的变位词
/*Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.
Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.
The order of output does not matter.
Example 1:
Input:
s: "cbaebabacd" p: "abc"
Output:
[0, 6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:
Input:
s: "abab" p: "ab"
Output:
[0, 1, 2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
两个哈希表，分别记录p的字符个数，和s中前p字符串长度的字符个数，然后比较，如果两者相同，则将0加入结果res中，然后开始遍历s中剩余的字符，
每次右边加入一个新的字符，然后去掉左边的一个旧的字符，每次再比较两个哈希表是否相同即可，参见代码如下：*/
class S438_1 {
public:
	vector<int> findAnagrams(string s, string p) {
		if (s.empty()) return{};
		vector<int> res, m1(256, 0), m2(256, 0);
		for (unsigned int i = 0; i < p.size(); ++i) {
			++m1[s[i]]; ++m2[p[i]];
		}
		if (m1 == m2) res.push_back(0);
		for (unsigned int i = p.size(); i < s.size(); ++i) {
			++m1[s[i]];
			--m1[s[i - p.size()]];
			if (m1 == m2) res.push_back(i - p.size() + 1);
		}
		return res;
	}
};
/*下面这种利用滑动窗口Sliding Window的方法也比较巧妙，首先统计字符串p的字符个数，然后用两个变量left和right表示滑动窗口的左右边界，用变量cnt表示字符串p
中需要匹配的字符个数，然后开始循环，如果右边界的字符已经在哈希表中了，说明该字符在p中有出现，则cnt自减1，然后哈希表中该字符个数自减1，右边界自加1，
如果此时cnt减为0了，说明p中的字符都匹配上了，那么将此时左边界加入结果res中。如果此时right和left的差为p的长度，说明此时应该去掉最左边的一个字符，
我们看如果该字符在哈希表中的个数大于等于0，说明该字符是p中的字符，为啥呢，因为上面我们有让每个字符自减1，如果不是p中的字符，那么在哈希表中个数应该为0，
自减1后就为-1，所以这样就知道该字符是否属于p，如果我们去掉了属于p的一个字符，cnt自增1，参见代码如下：*/
class S438_2{
public:
	vector<int> findAnagrams(string s, string p) {
		if (s.empty()) return{};
		vector<int> res, m(256, 0);
		unsigned int left = 0, right = 0, cnt = p.size(), n = s.size();
		for (char c : p) ++m[c];
		while (right < n) {
			if (m[s[right++]]-- >= 1) --cnt;
			if (cnt == 0) res.push_back(left);
			if (right - left == p.size() && m[s[left++]]++ >= 0) ++cnt;
		}
		return res;
	}
};
int main(int argc, char * argv[]){
	//438.Find All Anagrams in a String
	S438_1 s438;
	vector<int> re438 = s438.findAnagrams("cbaebabacd","abc");
	cout << "438.Find All Anagrams in a String: "   << endl;