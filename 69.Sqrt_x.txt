 //69.sqrt(n) 
class S69_1{//二分法
public:
	int mySqrt(int x) {
		if (x == 0)
			return 0;
		int left = 1, right = INT_MAX;
		while (true) {
			int mid = left + (right - left) / 2;    //(left+right)/2会溢出
			if (mid > x / mid) {
				right = mid - 1;
			}
			else {
				if (mid + 1 > x / (mid + 1))  //x < mid*mid这样会溢出
					return mid;
				left = mid + 1;
			}
		}
	}
};
class S69_2{//牛顿法
public:
  long long mySqrt(int x) {
	long long r = x;
	while (r*r > x)
		r = (r + x / r) / 2;
	return r;
  }
}; 
S69_1 s69; cout << s69.mySqrt(2) << endl;
	for (int x = 0; x <= INT_MAX; ++x) {
		long long r = s69.mySqrt(x);
		if (r<0 || r*r > x || (r + 1)*(r + 1) <= x)
			cout << "false: " << x << " " << r << endl;
		if (x % 10000000 == 0)
			cout << x << endl;
	}
	cout << "all checked" << endl;