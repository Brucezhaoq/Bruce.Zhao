//437. Path Sum III
/*You are given a binary tree in which each node contains an integer value.
Find the number of paths that sum to a given value.
The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).
The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.
Example:
root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

10
/  \
5   -3
/ \    \
3   2   11
/ \   \
3  -2   1
Return 3. The paths that sum to 8 are:
1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11
*/
/*最直观的思路：通过前序遍历的方式遍历二叉树，每遍历至一个节点，将当前节点的权值记录在数组中，并更新记录当前路径和的变量curSum，同时判断更新后的curSum与
sum是否相等，若相等则res加1。此时的curSum为从根节点到当前节点的路径之和。至于这条路径上的子路径是否满足题意，则需将数组中的权值在curSum中一个个减掉，
每剪掉一个，判断一次当前权值和是否与sum相等，若相等则res加1。此处需注意不能将数组中的权值完全减掉，最后应保留一个，因为全部去掉所得curSum为0，
若题中所给的sum刚好为0，则判断相等，但不符合题意。：*/
class S437_1 {
public:
	int pathSum(TreeNode* root, int sum) {
		int res = 0;
		vector<TreeNode*> out;
		helper(root, sum, 0, out, res);
		return res;
	}
private:
	void helper(TreeNode* node, int sum, int curSum, vector<TreeNode*>& out, int& res) {
		if (!node) return;
		curSum += node->val;
		out.push_back(node);
		if (curSum == sum) ++res;
		int t = curSum;
		for (unsigned int i = 0; i < out.size() - 1; ++i) {
			t -= out[i]->val;
			if (t == sum) ++res;
		}
		helper(node->left, sum, curSum, out, res);
		helper(node->right, sum, curSum, out, res);
		out.pop_back();
	}
};
/*优化算法，用hash表记录当前遍历路径中的子路径权值和对应出现的次数。
若sum为从根节点到某x节点的路径权值和，则遍历至节点x时，当前的路径和curSum恰好与sum相等，则res = m[curSum - sum] = m[0] = 1;
若sum为某段子路径权值和，如：x1->x2->x3->x4......中sum等于节点x3与节点x4的权值和，即sum = sumx3+x4。则遍历至x2时， m[curSum]++; 
处已经记录了m[curSum] = m[sumx1+x2] = 1,便利至x4时curSum = sumx1+x2+x3+x4,
则res = m[curSum - sum] = m[sumx1+x2+x3+x4 - sumx3+x4] = m[sumx1+x2] = 1。*/
class S437_2 {
public:
	int pathSum(TreeNode* root, int sum) {
		unordered_map<int, int> m;
		m[0] = 1;
		return helper(root, sum, 0, m);
	}
private:
	int helper(TreeNode* node, int sum, int curSum, unordered_map<int, int>& m) {
		if (!node) return 0;
		curSum += node->val;
		int res = m[curSum - sum];
		++m[curSum];
		res += helper(node->left, sum, curSum, m) + helper(node->right, sum, curSum, m);
		--m[curSum];
		return res;
	}
};
/*下面这种方法非常的简洁，也是利用了前序遍历，对于每个遍历到的节点进行处理，维护一个变量pre来记录之前路径之和，然后cur为pre加上当前节点值，
如果cur等于sum，那么返回结果时要加1，然后对当前节点的左右子节点调用递归函数求解，参见代码如下：*/
class S437_3 {
public:
	int pathSum(TreeNode* root, int sum) {
		if (!root) return 0;
		return sumUp(root, 0, sum) + pathSum(root->left, sum) + pathSum(root->right, sum);
	}
private:
	int sumUp(TreeNode* node, int pre, int& sum) {
		if (!node) return 0;
		int cur = pre + node->val;
		return (cur == sum) + sumUp(node->left, cur, sum) + sumUp(node->right, cur, sum);
	}
};

//437.Path SumIII
	Solution297_1 tree437;       //建立 二叉树对象,#代表NULL
	TreeNode* root437 = tree437.deserialize("10 5 -3 3 2 # 11 3 -2 # 1");
	S437_2 s437;
	cout << "437.Path Sum III: " << s437.pathSum(root437, 8) <<endl;