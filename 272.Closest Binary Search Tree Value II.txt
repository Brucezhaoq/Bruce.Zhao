//272.Closest Binary Search Tree Value II 最近的二分搜索树的值之二
/*Given a non-empty binary search tree and a target value, find k values in the BST that are closest to the target.
Note:
Given target value is a floating point.
You may assume k is always valid, that is: k ≤ total nodes.
You are guaranteed to have only one unique set of k values in the BST that are closest to the target.
Follow up:
Assume that the BST is balanced, could you solve it in less than O(n) runtime (where n = total nodes)?
Hint:
1. Consider implement these two helper functions:
　　i. getPredecessor(N), which returns the next smaller node to N.
　　ii. getSuccessor(N), which returns the next larger node to N.
2. Try to assume that each node has a parent pointer, it makes the problem much easier.
3. Without parent pointer we just need to keep track of the path from the root to the current node using a stack.
4. You would need two stacks to track the path in finding predecessor and successor node separately.
这道题是之前那道Closest Binary Search Tree Value的拓展，那道题只让我们找出离目标值最近的一个节点值，而这道题让我们找出离目标值最近的k个节点值，难度瞬间增加了不少
，我最先想到的方法是用中序遍历将所有节点值存入到一个一维数组中，由于二分搜索树的性质，这个一维数组是有序的，然后我们再在有序数组中需要和目标值最近的k个值就简单的多，
参见代码如下：*/
class S272_1 {
public:
	vector<int> closestKValues(TreeNode* root, double target, int k) {
		vector<int> res, v;
		inorder(root, v);
		int idx = 0;
		double diff = numeric_limits<double>::max();
		for (unsigned int i = 0; i < v.size(); ++i) {
			if (diff >= abs(target - v[i])) {
				diff = abs(target - v[i]);
				idx = i;
			}
		}
		int left = idx - 1; unsigned int right = idx + 1;
		for (int i = 0; i < k; ++i) {
			res.push_back(v[idx]);
			if (left >= 0 &&  right < v.size()) {
				if (abs(v[left] - target) > abs(v[right] - target)) {
					idx = right;
					++right;
				}
				else {
					idx = left;
					--left;
				}
			}
			else if (left >= 0) {
				idx = left;
				--left;
			}
			else if (right < v.size()) {
				idx = right;
				++right;
			}
		}
		return res;
	}
private:
	void inorder(TreeNode *root, vector<int> &v) {
		if (!root) return;
		inorder(root->left, v);
		v.push_back(root->val);
		inorder(root->right, v);
	}
};
/*还有一种解法是直接在中序遍历的过程中完成比较，当遍历到一个节点时，如果此时结果数组不到k个，我们直接将此节点值加入res中，如果该节点值和目标值的差值的绝对值小于
res的首元素和目标值差值的绝对值，说明当前值更靠近目标值，则将首元素删除，末尾加上当前节点值，反之的话说明当前值比res中所有的值都更偏离目标值，由于中序遍历的特性，
之后的值会更加的遍历，所以此时直接返回最终结果即可，参见代码如下：*/
class S272_2 {
public:
	vector<int> closestKValues(TreeNode* root, double target, unsigned int k) {
		vector<int> res;
		inorder(root, target, k, res);
		return res;
	}
private:
	void inorder(TreeNode *root, double target, unsigned int k, vector<int> &res) {
		if (!root) return;
		inorder(root->left, target, k, res);
		if (res.size() < k) res.push_back(root->val);
		else if (abs(root->val - target) < abs(res[0] - target)) {
			res.erase(res.begin());
			res.push_back(root->val);
		}
		else return;
		inorder(root->right, target, k, res);
	}
};
//下面这种方法是上面那种方法的迭代写法，原理一模一样，参见代码如下：
class S272_3 {
public:
	vector<int> closestKValues(TreeNode* root, double target, unsigned  int k) {
		vector<int> res;
		stack<TreeNode*> s;
		TreeNode *p = root;
		while (p || !s.empty()) {
			while (p) {
				s.push(p);
				p = p->left;
			}
			p = s.top(); s.pop();
			if (res.size() < k) res.push_back(p->val);
			else if (abs(p->val - target) < abs(res[0] - target)) {
				res.erase(res.begin());
				res.push_back(p->val);
			}
			else break;
			p = p->right;
		}
		return res;
	}
};

int main(int argc, char* argv[]){
	//272.Closest Binary Search Tree Value II
	Solution297_1 tree272;       //建立 二叉树对象,#代表NULL
	string str272 = "2 1 3";
	TreeNode* root272 = tree272.deserialize(str272);
	S272_3 s272;
	vector<int> res272 = s272.closestKValues(root272, 1.1, 2);
	cout << "272.Closest Binary Search Tree Value II: " << endl;