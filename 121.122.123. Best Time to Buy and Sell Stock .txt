//121-123.Best Time to Buy and Sell Stock I&II&III 
/* Say you have an array for which the ith element is the price of a given stock on day i.
If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), 
design an algorithm to find the maximum profit.
Example 1:
Input: [7, 1, 5, 3, 6, 4]
Output: 5
max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)
Example 2:
Input: [7, 6, 4, 3, 1]
Output: 0
*/
#include<iostream>  
#include<algorithm>  
#include<vector>
using namespace std;

//121.Best Time to Buy and Sell Stock I
class Solution {
public:
	int maxProfit(vector<int>& prices) {
		int res = 0, buy = INT_MAX;
		for (int price : prices) {
			buy = min(buy, price);
			res = max(res, price - buy);
		}
		return res;
	}
};

//122. Best Time to Buy and Sell Stock II  说你有一个数组，其中第i 个元素是第i天给定股票的价格。设计一个算法来找到最大的利润。不限制交易次数
class Solution2 {
public:
	int maxProfit(vector<int>& prices) {
		int total = 0;
		for (int i = 0; i< prices.size() - 1; i++) {
			if (prices[i + 1]>prices[i]) 
				total += prices[i + 1] - prices[i];
		}
		return total;
	}
};

//123. Best Time to Buy and Sell Stock III
/*
说你有一个数组，其中第i 个元素是第i天给定股票的价格。
设计一个算法来找到最大的利润。您最多可以完成两个交易。
注意：您不得同时进行多笔交易（即，您必须在再次购买之前出售股票）。
The thinking is simple and is inspired by the best solution from Single Number II (I read through the discussion after I use DP).
Assume we only have 0 money at first;
4 Variables to maintain some interested 'ceilings' so far:
The maximum of if we've just buy 1st stock, if we've just sold 1nd stock, if we've just buy 2nd stock, if we've just sold 2nd stock.
Very simple code too and work well. I have to say the logic is simple than those in Single Number II.
*/
class Solution3_1 {
public:
	int maxProfit(vector<int>& prices) {
		int hold1 = INT_MIN, hold2 = INT_MIN;
		int release1 = 0, release2 = 0;
		for (int price : prices){                              // Assume we only have 0 money at first
			release2   = max(release2, hold2 + price);     // The maximum if we've just sold 2nd stock so far.
			hold2      = max(hold2, release1 - price);  // The maximum if we've just buy  2nd stock so far.
			release1   = max(release1, hold1 + price);     // The maximum if we've just sold 1nd stock so far.
			hold1      = max(hold1, -price);          // The maximum if we've just buy  1st stock so far. 
		}
		return release2; ///Since release1 is initiated as 0, so release2 will always higher than release1.
	}
};
/*123. Best Time to Buy and Sell Stock III
It is similar to other buy/sell problems. just do DP and define an array of states to track the current maximum profits at different stages. 
For example, in the below code
states[][0]: one buy
states[][1]: one buy, one sell
states[][2]: two buys, one sell
states[][3]: two buy, two sells
The states transistions occurs when buy/sell operations are executed. For example, state[][0] can move to state[][1] via one sell operation.
*/
class Solution3_2 {
public:
	int maxProfit(vector<int>& prices) {
		int states[2][4] = { INT_MIN, 0, INT_MIN, 0 }; // 0: 1 buy, 1: one buy/sell, 2: 2 buys/1 sell, 3, 2 buys/sells
		int len = prices.size(), i, cur = 0, next = 1;
		for (i = 0; i<len; ++i)
		{
			states[next][0] = max(states[cur][0], -prices[i]);
			states[next][1] = max(states[cur][1], states[cur][0] + prices[i]);
			states[next][2] = max(states[cur][2], states[cur][1] - prices[i]);
			states[next][3] = max(states[cur][3], states[cur][2] + prices[i]);
			swap(next, cur);
		}
		return max(states[cur][1], states[cur][3]);
	}
};

int main()
{
	//vector<int>  prices = {7,1,5,3,6,4};
	vector<int>  prices = { 7, 1, 5, 6, 7};
	Solution3_2 solution;
	cout << solution.maxProfit(prices) << endl;

	return 0;
}
