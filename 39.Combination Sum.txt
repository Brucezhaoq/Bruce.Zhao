//39.Combination Sum
/*Given a set of candidate numbers (C) (without duplicates) and a target number (T), 
find all unique combinations in C where the candidate numbers sums to T.
The same repeated number may be chosen from C unlimited number of times.
Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [2, 3, 6, 7] and target 7, 
A solution set is: 
[
  [7],
  [2, 2, 3]
]
*/
class S39 {
public:
	vector<vector<int> > combinationSum(vector<int> &nums, int target) {
		sort(nums.begin(), nums.end());
		vector<vector<int> > res;
		vector<int> combination;
		combinationSum(nums, target, res, combination, 0);
		return res;
	}
private:
	void combinationSum(vector<int> &nums, int target, vector<vector<int> > &res, vector<int> &combination, int begin) {
		if (!target) {
			res.push_back(combination);
			return;
		}
		for (int i = begin; i != nums.size() && target >= nums[i]; ++i) {
			combination.push_back(nums[i]);
			combinationSum(nums, target - nums[i], res, combination, i);
			combination.pop_back();
		}
	}
};
//39.Combination Sum   
	//vector<int> nums39{ 2, 3, 4, 7};
	vector<int> nums39{ 2, 3 };
	S39 s39;
	vector<vector<int>> result39 = s39.combinationSum(nums39, 100);
	cout << "39.Combination Sum: " << endl;