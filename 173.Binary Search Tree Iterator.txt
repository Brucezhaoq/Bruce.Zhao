//173.Binary Search Tree Iterator 二叉搜索树迭代器
/*Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.
Calling next() will return the next smallest number in the BST.
Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.
Credits:
Special thanks to @ts for adding this problem and creating all test cases.
这道题主要就是考二叉树的中序遍历的非递归形式，需要额外定义一个栈来辅助，二叉搜索树的建树规则就是左<根<右，用中序遍历即可从小到大取出所有节点。代码如下：*/
class S173 {
public:
	S173(TreeNode *root) {
		while (root) {
			s.push(root);
			root = root->left;
		}
	}

	/** @return whether we have a next smallest number */
	bool hasNext() {
		return !s.empty();
	}

	/** @return the next smallest number */
	int next() {
		TreeNode *n = s.top();
		s.pop();
		int res = n->val;
		if (n->right) {
			n = n->right;
			while (n) {
				s.push(n);
				n = n->left;
			}
		}
		return res;
	}
private:
	stack<TreeNode*> s;
};
 
	//173.Binary Search Tree Iterator
	Solution297_1 tree173;       //建立 100 10 # # 20 11的二叉树对象,#代表NULL
	string str173 = "100 10 # # 20 11";
	TreeNode* root173 = tree173.deserialize(str173);
	S173  s173(root173);
	cout << s173.next() << endl;
	cout << s173.next() << endl;
	cout << "173.Binary Search Tree Iterator: " <<  endl;