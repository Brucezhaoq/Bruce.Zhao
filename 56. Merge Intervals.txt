//56. Merge Intervals
/*Given a collection of intervals, merge all overlapping intervals.
For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].
*/
/*这道和之前那道 Insert Interval 插入区间 很类似，这次题目要求我们合并区间，之前那题明确了输入区间集是有序的，
而这题没有，所有我们首先要做的就是给区间集排序，由于我们要排序的是个结构体，所以我们要定义自己的comparator，
才能用sort来排序，我们以start的值从小到大来排序，排完序我们就可以开始合并了，首先把第一个区间存入结果中，然后
从第二个开始遍历区间集，如果结果中最后一个区间和遍历的当前区间无重叠，直接将当前区间存入结果中，如果有重叠，
将结果中最后一个区间的end值更新为结果中最后一个区间的end和当前end值之中的较大值，然后继续遍历区间集，以此类推
可以得到最终结果，代码如下：*/
//56. Merge Intervals
struct Interval {
	int start;
	int end;
	Interval() : start(0), end(0) {}
	Interval(int s, int e) : start(s), end(e) {}
};
class S56_1 {
public:
	vector<Interval> merge(vector<Interval>& ins) {
		if (ins.empty()) return vector<Interval>{};
		vector<Interval> res;
		sort(ins.begin(), ins.end(), [](Interval a, Interval b){return a.start < b.start; });
		res.push_back(ins[0]);
		for (unsigned int i = 1; i < ins.size(); i++) {
			if (res.back().end < ins[i].start) res.push_back(ins[i]);
			else
				res.back().end = max(res.back().end, ins[i].end);
		}
		return res;
	}
};

//56. Merge Intervals
	vector<Interval>  nums56{ { 1, 3 }, { 2, 6 }, { 8, 10 }, { 15, 18 } };
	S56_1 s56;
	s56.merge(nums56);
	cout << "56. Merge Intervals: " << endl;