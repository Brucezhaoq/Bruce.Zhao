//42. Trapping Rain Water
/*Given n non-negative integers representing an elevation map where the width of each bar is 1, 
compute how much water it is able to trap after raining.
For example, 
Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.
*/
class S42_1 {
public:
	int trap(vector<int>& height) {
		int l = 0, r = height.size() - 1, level = 0, water = 0;
		while (l < r) {
			int lower = height[height[l] < height[r] ? l++ : r--];
			level = max(level, lower);
			water += level - lower;
		}
		return water;
	}
};
// Time O(n) Space O(n)
/*左右同时扫描取每个点的左右最大值left right
Idx       0 1 2 3 4 5 6 7 8 9 10 11
height    0 1 0 2 1 0 1 3 2 1  2  1
left      0 0 1 1 2 2 2 2 3 3  3  3
right     3 3 3 3 3 3 3 2 2 2  1  0
*/
class S42_2{
public:
	int trap(const vector<int>& height) {
		int n = height.size();
		vector<int> max_left(n,0);
		vector<int> max_right(n, 0);
		for (int i = 1; i < n; i++) {
			max_left[i] = max(max_left[i - 1], height[i - 1]);
			max_right[n - 1 - i] = max(max_right[n - i], height[n - i]);
		}
		int water = 0;
		for (int i = 0; i < n; i++) {
			int water_h = min(max_left[i], max_right[i]);
			if (water_h > height[i]) {
				water += water_h - height[i];
			}
		}
		return water;
	}
};
	//42.Trapping Rain Water
	vector<int> nums42{ 0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1 }; 
	S42_2 s42;
	cout << "42.Trapping Rain Water: " << s42.trap(nums42) << endl;