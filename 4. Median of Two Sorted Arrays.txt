//4. Median of Two Sorted Arrays
/*There are two sorted arrays nums1 and nums2 of size m and n respectively.
Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).复杂度是关键
Example 1:
nums1 = [1, 3]
nums2 = [2]
The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]
The median is (2 + 3)/2 = 2.5
两个排序数组，容量为m的数组A，容量为n的数组B。求两个数组的中位数,硬性要求时间复杂度O(log (m+n)).
中位数是在一组数据中居于中间的数(特别注意的地方是：这组数据之前已经经过升序排列！！！)，
即在这组数据中，有一半的数据比它大，有一半的数据比它小。如果这组数据包含偶数个数字，中值是位于中间的两个数的平均值
*/
/*方法1
This problem is notoriously hard to implement due to all the corner cases. Most implementations consider odd-lengthed 
and even-lengthed arrays as two different cases and treat them separately. As a matter of fact, with a little mind twist. 
These two cases can be combined as one, leading to a very simple solution where (almost) no special treatment is needed.
First, let's see the concept of 'MEDIAN' in a slightly unconventional way. That is:
"if we cut the sorted array to two halves of EQUAL LENGTHS, then
median is the AVERAGE OF Max(lower_half) and Min(upper_half), i.e. the
two numbers immediately next to the cut".
For example, for [2 3 5 7], we make the cut between 3 and 5:
[2 3 / 5 7]
then the median = (3+5)/2. Note that I'll use '/' to represent a cut, and (number / number) to represent a cut made through
a number in this article.
for [2 3 4 5 6], we make the cut right through 4 like this:
[2 3 (4/4) 5 7]
Since we split 4 into two halves, we say now both the lower and upper subarray contain 4. 
This notion also leads to the correct answer: (4 + 4) / 2 = 4;
For convenience, let's use L to represent the number immediately left to the cut, and R the right counterpart. In [2 3 5 7], 
for instance, we have L = 3 and R = 5, respectively.
We observe the index of L and R have the following relationship with the length of the array N:
N        Index of L / R
1               0 / 0
2               0 / 1
3               1 / 1
4               1 / 2
5               2 / 2
6               2 / 3
7               3 / 3
8               3 / 4
It is not hard to conclude that index of L = (N-1)/2, and R is at N/2. Thus, the median can be represented as
(L + R)/2 = (A[(N-1)/2] + A[N/2])/2
To get ready for the two array situation, let's add a few imaginary 'positions' (represented as #'s) in between numbers,
and treat numbers as 'positions' as well.
[6 9 13 18]  ->   [# 6 # 9 # 13 # 18 #]    (N = 4)
position index     0 1 2 3 4 5  6 7  8     (N_Position = 9)
[6 9 11 13 18]->   [# 6 # 9 # 11 # 13 # 18 #]   (N = 5)
position index      0 1 2 3 4 5  6 7  8 9 10    (N_Position = 11)
As you can see, there are always exactly 2*N+1 'positions' regardless of length N. Therefore, the middle cut should always 
be made on the Nth position (0-based). Since index(L) = (N-1)/2 and index(R) = N/2 in this situation, we can infer that index(L) 
= (CutPosition-1)/2, index(R) = (CutPosition)/2.
Now for the two-array case:
A1: [# 1 # 2 # 3 # 4 # 5 #]    (N1 = 5, N1_positions = 11)
A2: [# 1 # 1 # 1 # 1 #]     (N2 = 4, N2_positions = 9)
Similar to the one-array problem, we need to find a cut that divides the two arrays each into two halves such that
"any number in the two left halves" <= "any number in the two right
halves".
We can also make the following observations：
There are 2N1 + 2N2 + 2 position altogether. Therefore, there must be exactly N1 + N2 positions on each side of the cut, 
and 2 positions directly on the cut.
Therefore, when we cut at position C2 = K in A2, then the cut position in A1 must be C1 = N1 + N2 - k. For instance, 
if C2 = 2, then we must have C1 = 4 + 5 - C2 = 7.
[# 1 # 2 # 3 # (4/4) # 5 #]
[# 1 / 1 # 1 # 1 #]
When the cuts are made, we'd have two L's and two R's. They are
L1 = A1[(C1-1)/2]; R1 = A1[C1/2];
L2 = A2[(C2-1)/2]; R2 = A2[C2/2];
In the above example,
L1 = A1[(7-1)/2] = A1[3] = 4; R1 = A1[7/2] = A1[3] = 4;
L2 = A2[(2-1)/2] = A2[0] = 1; R2 = A1[2/2] = A1[1] = 1;
Now how do we decide if this cut is the cut we want? Because L1, L2 are the greatest numbers on the left halves and R1, 
R2 are the smallest numbers on the right, we only need
L1 <= R1 && L1 <= R2 && L2 <= R1 && L2 <= R2
to make sure that any number in lower halves <= any number in upper halves. As a matter of fact, since
L1 <= R1 and L2 <= R2 are naturally guaranteed because A1 and A2 are sorted, we only need to make sure:
L1 <= R2 and L2 <= R1.
Now we can use simple binary search to find out the result.
If we have L1 > R1, it means there are too many large numbers on the left half of A1, then we must move C1 to the left 
(i.e. move C2 to the right);
If L2 > R1, then there are too many large numbers on the left half of A2, and we must move C2 to the left.
Otherwise, this cut is the right one.
After we find the cut, the medium can be computed as (max(L1, L2) + min(R1, R2)) / 2;
Two side notes:
A. Since C1 and C2 can be mutually determined from each other, we can just move one of them first, then calculate the other accordingly. 
However, it is much more practical to move C2 (the one on the shorter array) first. The reason is that on the shorter array, 
all positions are possible cut locations for median, but on the longer array, the positions that are too far left or right are simply
impossible for a legitimate cut. For instance, [1], [2 3 4 5 6 7 8]. Clearly the cut between 2 and 3 is impossible, because the shorter 
array does not have that many elements to balance out the [3 4 5 6 7 8] part if you make the cut this way. Therefore, for the longer 
array to be used as the basis for the first cut, a range check must be performed. It would be just easier to do it on the shorter array, 
which requires no checks whatsoever. Also, moving only on the shorter array gives a run-time complexity of O(log(min(N1, N2)))
(edited as suggested by @baselRus)
B. The only edge case is when a cut falls on the 0th(first) or the 2Nth(last) position. For instance, if C2 = 2N2, 
then R2 = A2[2*N2/2] = A2[N2], which exceeds the boundary of the array. To solve this problem, we can imagine that both A1 and A2 
actually have two extra elements, INT_MAX at A[-1] and INT_MAX at A[N]. These additions don't change the result, 
but make the implementation easier: If any L falls out of the left boundary of the array, then L = INT_MIN, and if any R falls out of 
the right boundary, then R = INT_MAX.
I know that was not very easy to understand, but all the above reasoning eventually boils down to the following concise code:
*/
class S4_1 { //log(m+n)
public:
	double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
		int N1 = nums1.size();
		int N2 = nums2.size();
		if (N1 < N2) return findMedianSortedArrays(nums2, nums1);	// Make sure A2 is the shorter one.

		int lo = 0, hi = N2 * 2;
		while (lo <= hi) {
			int mid2 = (lo + hi) / 2;   // Try Cut 2 
			int mid1 = N1 + N2 - mid2;  // Calculate Cut 1 accordingly

			double L1 = (mid1 == 0) ? INT_MIN : nums1[(mid1 - 1) / 2];	// Get L1, R1, L2, R2 respectively
			double L2 = (mid2 == 0) ? INT_MIN : nums2[(mid2 - 1) / 2];
			double R1 = (mid1 == N1 * 2) ? INT_MAX : nums1[(mid1) / 2];
			double R2 = (mid2 == N2 * 2) ? INT_MAX : nums2[(mid2) / 2];

			if (L1 > R2) lo = mid2 + 1;		// A1's lower half is too big; need to move C1 left (C2 right)
			else if (L2 > R1) hi = mid2 - 1;	// A2's lower half too big; need to move C2 left.
			else return (max(L1, L2) + min(R1, R2)) / 2;	// Otherwise, that's the right cut.
		}
		return -1;
	}
};
/*方法2
题目：给定两个已经排序的数组，找出两者所有元素中的中间值
分析：
   这是一道非常经典的题。这题更通用的形式是，给定两个已经排序好的数组，找到两者所有元素中第k 大的元素。
O(m + n) 的解法比较直观，直接merge 两个数组，然后求第k 大的元素。
   不过我们仅仅需要第k 大的元素，是不需要“排序”这么复杂的操作的。可以用一个计数器，记录当前已经找到第m 大的元素了。同时我们使用两个指针pA 和pB，
分别指向A 和B 数组的第一个元素，使用类似于merge sort 的原理，如果数组A 当前元素小，那么pA++，同时m++；如果数组B 当前元素小，那么pB++，同时m++。
最终当m 等于k 的时候，就得到了我们的答案，O(k)时间，O(1) 空间。但是，当k 很接近m + n 的时候，这个方法还是O(m + n) 的。
   有没有更好的方案呢？我们可以考虑从k 入手。如果我们每次都能够删除一个一定在第k 大元素之前的元素，那么我们需要进行k 次。但是如果每次我们都删除一半呢？
由于A 和B 都是有序的，我们应该充分利用这里面的信息，类似于二分查找，也是充分利用了“有序”。
   假设A 和B 的元素个数都大于k/2，我们将A 的第k/2 个元素（即A[k/2-1]）和B 的第k/2个元素（即B[k/2-1]）进行比较，有以下三种情况
（为了简化这里先假设k 为偶数，所得到的结论对于k 是奇数也是成立的）：
A[k/2-1] == B[k/2-1]
A[k/2-1] > B[k/2-1]
A[k/2-1] < B[k/2-1]
如果A[k/2-1] < B[k/2-1]，意味着A[0] 到A[k/2-1]的肯定在A U B 的top k 元素的范围内，换句话说，A[k/2-1]不可能大于A U B 的第k 大元素。留给读者证明。
因此，我们可以放心的删除A 数组的这k/2 个元素。同理，当A[k/2-1] > B[k/2-1] 时，可以删除B 数组的k/2 个元素。
当A[k/2-1] == B[k/2-1] 时，说明找到了第k 大的元素，直接返回A[k/2-1] 或B[k/2-1]即可。
因此，我们可以写一个递归函数。那么函数什么时候应该终止呢？
   当A 或B 是空时，直接返回B[k-1] 或A[k-1]；
   当k=1 是，返回min(A[0], B[0])；
   当A[k/2-1] == B[k/2-1] 时，返回A[k/2-1] 或B[k/2-1]
*/
class S4_2 {//log(m+n)
public:
	double findMedianSortedArrays(const vector<int>& A, const vector<int>& B) {
		const int m = A.size();
		const int n = B.size();
		int total = m + n;
		if (total == 0) return -1;
		if (total & 0x1)     //奇数
			return find_kth(A.begin(), m, B.begin(), n, total / 2 + 1);
		else
			return (find_kth(A.begin(), m, B.begin(), n, total / 2)        //偶数
			+ find_kth(A.begin(), m, B.begin(), n, total / 2 + 1)) / 2.0;
	}
private:
	 int find_kth(vector<int>::const_iterator A, int m,
		vector<int>::const_iterator B, int n, int k) {
		//always assume that m is equal or smaller than n
		if (m > n) return find_kth(B, n, A, m, k);
		if (m == 0) return *(B + k - 1);
		if (k == 1) return min(*A, *B);
		//divide k into two parts
		int ia = min(k / 2, m), ib = k - ia;
		if (*(A + ia - 1) < *(B + ib - 1))
			return find_kth(A + ia, m - ia, B, n, k - ia);
		else if (*(A + ia - 1) > *(B + ib - 1))
			return find_kth(A, m, B + ib, n - ib, k - ib);
		else
			return A[ia - 1];
	}
};
//4. Median of Two Sorted Arrays
	int N4 = 10;
	vector<int> nums4_1(N4, 0);
	vector<int> nums4_2(N4, 0);
	for (int i = 0; i < N4; i++){
		nums4_1[i] = i + 1;
		nums4_2[i] = i + 1 + N4;
	} 
	S4_2 s4;
	timestart();
	cout << "4.Median of Two Sorted Arrays: " << s4.findMedianSortedArrays(nums4_1, nums4_2) << endl;
	timeend();
	cout << "4.Median of Two Sorted Arrays:  " << cost << "s" << endl;