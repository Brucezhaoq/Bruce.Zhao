//48. Rotate Image
/*You are given an n x n 2D matrix representing an image.Rotate the image by 90 degrees (clockwise).
Note:You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. 
DO NOT allocate another 2D matrix and do the rotation.
Given input matrix =
[
[1,2,3],
[4,5,6],
[7,8,9]
],
rotate the input matrix in-place such that it becomes:
[
[7,4,1],
[8,5,2],
[9,6,3]
]
*/
class S48_1 {
public:
	/*
	* clockwise rotate
	* first reverse up to down, then swap the symmetry
	* 1 2 3     7 8 9     7 4 1
	* 4 5 6  => 4 5 6  => 8 5 2
	* 7 8 9     1 2 3     9 6 3
	*/
	void rotate(vector<vector<int> > &matrix) {
		reverse(matrix.begin(), matrix.end());
		for (unsigned int i = 0; i < matrix.size(); ++i) {
			for (unsigned int j = i + 1; j < matrix[i].size(); ++j)
				swap(matrix[i][j], matrix[j][i]);
		}
	}

	/*
	* anticlockwise rotate
	* first reverse left to right, then swap the symmetry
	* 1 2 3     3 2 1     3 6 9
	* 4 5 6  => 6 5 4  => 2 5 8
	* 7 8 9     9 8 7     1 4 7
	*/
	void anti_rotate(vector<vector<int> > &matrix) {
		//for (auto vi : matrix)   //这两行代码在VS2013 vi是新的容器它的值改变,不传递给matrix
		//	reverse(vi.begin(), vi.end());
		for (unsigned int i = 0; i < matrix.size(); ++i)
			reverse(matrix[i].begin(), matrix[i].end());
		for (unsigned int i = 0; i < matrix.size(); ++i) {
			for (unsigned int j = i + 1; j < matrix[i].size(); ++j)
				swap(matrix[i][j], matrix[j][i]);
		}
	}

};
void Print2dVec(const vector<vector<int> >& result){
	for (auto it: result){
		for (auto it0: it)
			cout << it0 << ' ';
		cout << endl;
	}
}

//48. Rotate Image
	cout << "48. Rotate Image:" << endl;
	vector<vector<int> >  matric{ { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };
	Print2dVec(matric);

	S48_1 s48;

	s48.rotate(matric);
	cout << "ClockWise Rotate:" << endl;
	Print2dVec(matric);

	s48.anti_rotate(matric); s48.anti_rotate(matric);
	cout << "AntiClockwise Rotate:" << endl;
	Print2dVec(matric);