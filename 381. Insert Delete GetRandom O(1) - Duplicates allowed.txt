//381. Insert Delete GetRandom O(1) - Duplicates allowed
/*Design a data structure that supports all following operations in average O(1) time.
Note: Duplicate elements are allowed.
insert(val): Inserts an item val to the collection.
remove(val): Removes an item val from the collection if present.
getRandom: Returns a random element from current collection of elements. 
The probability of each element being returned is linearly related to the number of same value the collection contains.*/
/*S381_1
There are two data member in the solution
a vector nums
an unordered_map m
The key of m is the val, the value of m is a vector contains indices where the val appears in nums.
Each element of nums is a pair, the first element of the pair is val itself, the second element of the pair is an index into m[val].
There is a relationship between nums and m:
m[nums[i].first][nums[i].second] == i;*/
class S381_1{//100万insert 5s
public:
	/** Initialize your data structure here. */
	S381_1() {
	}

	/** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */
	bool insert(int val) {
		auto result = m.find(val) == m.end();

		m[val].push_back(nums.size());
		nums.push_back(pair<int, int>(val, m[val].size() - 1));

		return result;
	}

	/** Removes a value from the collection. Returns true if the collection contained the specified element. */
	bool remove(int val) {
		auto result = m.find(val) != m.end();
		if (result)
		{
			auto last = nums.back();
			m[last.first][last.second] = m[val].back();
			nums[m[val].back()] = last;
			m[val].pop_back();
			if (m[val].empty()) m.erase(val);
			nums.pop_back();
		}
		return result;
	}

	/** Get a random element from the collection. */
	int getRandom() {
		return nums[rand() % nums.size()].first;
	}
private:
	vector<pair<int, int>> nums;
	unordered_map<int, vector<int>> m;
};
class S381_2 {  //100万insert 6.9s
public:
	/** Initialize your data structure here. */
	S381_2() {}

	/** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */
	bool insert(int val) {
		m[val].push(nums.size());
		nums.push_back(val);
		return m[val].size() == 1;
	}

	/** Removes a value from the collection. Returns true if the collection contained the specified element. */
	bool remove(int val) {
		if (m[val].empty()) return false;
		int idx = m[val].top();
		m[val].pop();
		if (nums.size() - 1 != idx) {
			int t = nums.back();
			nums[idx] = t;
			m[t].pop();
			m[t].push(idx);
		}
		nums.pop_back();
		return true;
	}

	/** Get a random element from the collection. */
	int getRandom() {
		return nums[rand() % nums.size()];
	}
private:
	vector<int> nums;
	unordered_map<int, priority_queue<int>> m;
};
class S381_3 {  //100万insert 8.9s
public:
    /** Initialize your data structure here. */
	S381_3() {}
    
    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */
    bool insert(int val) {
        m[val].insert(nums.size());
        nums.push_back(val);
        return m[val].size() == 1;
    }
    
    /** Removes a value from the collection. Returns true if the collection contained the specified element. */
    bool remove(int val) {
        if (m[val].empty()) return false;
        int idx = *m[val].begin();
        m[val].erase(idx);
        if (nums.size() - 1 != idx) {
            int t = nums.back();
            nums[idx] = t;
            m[t].erase(nums.size() - 1);
            m[t].insert(idx);
        } 
        nums.pop_back();
        return true;
    }
    
    /** Get a random element from the collection. */
    int getRandom() {
        return nums[rand() % nums.size()];
    }

private:
    vector<int> nums;
    unordered_map<int, unordered_set<int>> m;
};

 
	S381_3 s381;
	timestart();
	for (int i = 0; i < 1; i++)
		s381.insert(i);
	timeend();
	//s381.insert(2); s381.insert(3); s381.insert(2); 
	//m 2,(0,2) 
	//m 3, 1
	//nums 2,0
	//nums 3,0
	//nums 2,1
	cout << "381. Insert Delete GetRandom O(1) - Duplicates allowed: " << "计算时间为: " << cost << "s" << endl;