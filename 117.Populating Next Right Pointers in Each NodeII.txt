//117.Populating Next Right Pointers in Each NodeII
class Solution117 {
public:
	void connect1(TreeNode *&root) { //recursion,more than constant space
		if (!root) return;
		TreeNode *p = root->next;
		while (p) {
			if (p->left) {
				p = p->left;
				break;
			}
			if (p->right) {
				p = p->right;
				break;
			}
			p = p->next;
		}
		if (root->right) root->right->next = p;
		if (root->left) root->left->next = root->right ? root->right : p;
		connect1(root->right);
		connect1(root->left);
	}
	void connect2(TreeNode *root) {//non recursion,more than constant space
		if (!root) return;
		queue<TreeNode*> q;
		q.push(root);
		q.push(NULL);
		while (true) {
			TreeNode *cur = q.front();
			q.pop();
			if (cur) {
				cur->next = q.front();
				if (cur->left) q.push(cur->left);
				if (cur->right) q.push(cur->right);
			}
			else {
				if (q.size() == 0 || q.front() == NULL) return;
				q.push(NULL);
			}
		}
	}
	void connect3(TreeNode *root) {//non recursion, constant space
		if (!root) return;
		TreeNode *leftMost = root;
		while (leftMost) {
			TreeNode *p = leftMost;
			while (p && !p->left && !p->right) p = p->next;
			if (!p) return;
			leftMost = p->left ? p->left : p->right;
			TreeNode *cur = leftMost;
			while (p) {
				if (cur == p->left) {
					if (p->right) {
						cur->next = p->right;
						cur = cur->next;
					}
					p = p->next;
				}
				else if (cur == p->right) {
					p = p->next;
				}
				else {
					if (!p->left && !p->right) {
						p = p->next;
						continue;
					}
					cur->next = p->left ? p->left : p->right;
					cur = cur->next;
				}
			}
		}
	}
};
//117.Populating Next Right Pointers in Each NodeII
	vector<int> vals117{ 1, 2, 3, 4, 5 };
	struct TreeNode* root117 = insertCompleteTree2(&root117, vals117);  //构建完全二叉树
	InsertBST(root117,7);
	Solution117 solution117;
	solution117.connect1(root117);
	solution117.connect2(root117);
	solution117.connect3(root117);
	cout << "117.Populating Next Right Pointers in Each NodeII: " << endl;